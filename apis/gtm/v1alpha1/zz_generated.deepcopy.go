//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ASMap) DeepCopyInto(out *ASMap) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ASMap.
func (in *ASMap) DeepCopy() *ASMap {
	if in == nil {
		return nil
	}
	out := new(ASMap)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ASMap) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ASMapInitParameters) DeepCopyInto(out *ASMapInitParameters) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]AssignmentInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]DefaultDatacenterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ASMapInitParameters.
func (in *ASMapInitParameters) DeepCopy() *ASMapInitParameters {
	if in == nil {
		return nil
	}
	out := new(ASMapInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ASMapList) DeepCopyInto(out *ASMapList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ASMap, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ASMapList.
func (in *ASMapList) DeepCopy() *ASMapList {
	if in == nil {
		return nil
	}
	out := new(ASMapList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ASMapList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ASMapObservation) DeepCopyInto(out *ASMapObservation) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]AssignmentObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]DefaultDatacenterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ASMapObservation.
func (in *ASMapObservation) DeepCopy() *ASMapObservation {
	if in == nil {
		return nil
	}
	out := new(ASMapObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ASMapParameters) DeepCopyInto(out *ASMapParameters) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]AssignmentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]DefaultDatacenterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ASMapParameters.
func (in *ASMapParameters) DeepCopy() *ASMapParameters {
	if in == nil {
		return nil
	}
	out := new(ASMapParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ASMapSpec) DeepCopyInto(out *ASMapSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ASMapSpec.
func (in *ASMapSpec) DeepCopy() *ASMapSpec {
	if in == nil {
		return nil
	}
	out := new(ASMapSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ASMapStatus) DeepCopyInto(out *ASMapStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ASMapStatus.
func (in *ASMapStatus) DeepCopy() *ASMapStatus {
	if in == nil {
		return nil
	}
	out := new(ASMapStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignmentInitParameters) DeepCopyInto(out *AssignmentInitParameters) {
	*out = *in
	if in.AsNumbers != nil {
		in, out := &in.AsNumbers, &out.AsNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignmentInitParameters.
func (in *AssignmentInitParameters) DeepCopy() *AssignmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(AssignmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignmentObservation) DeepCopyInto(out *AssignmentObservation) {
	*out = *in
	if in.AsNumbers != nil {
		in, out := &in.AsNumbers, &out.AsNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignmentObservation.
func (in *AssignmentObservation) DeepCopy() *AssignmentObservation {
	if in == nil {
		return nil
	}
	out := new(AssignmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AssignmentParameters) DeepCopyInto(out *AssignmentParameters) {
	*out = *in
	if in.AsNumbers != nil {
		in, out := &in.AsNumbers, &out.AsNumbers
		*out = make([]*float64, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(float64)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AssignmentParameters.
func (in *AssignmentParameters) DeepCopy() *AssignmentParameters {
	if in == nil {
		return nil
	}
	out := new(AssignmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMap) DeepCopyInto(out *CIDRMap) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMap.
func (in *CIDRMap) DeepCopy() *CIDRMap {
	if in == nil {
		return nil
	}
	out := new(CIDRMap)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CIDRMap) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapAssignmentInitParameters) DeepCopyInto(out *CIDRMapAssignmentInitParameters) {
	*out = *in
	if in.Blocks != nil {
		in, out := &in.Blocks, &out.Blocks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapAssignmentInitParameters.
func (in *CIDRMapAssignmentInitParameters) DeepCopy() *CIDRMapAssignmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(CIDRMapAssignmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapAssignmentObservation) DeepCopyInto(out *CIDRMapAssignmentObservation) {
	*out = *in
	if in.Blocks != nil {
		in, out := &in.Blocks, &out.Blocks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapAssignmentObservation.
func (in *CIDRMapAssignmentObservation) DeepCopy() *CIDRMapAssignmentObservation {
	if in == nil {
		return nil
	}
	out := new(CIDRMapAssignmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapAssignmentParameters) DeepCopyInto(out *CIDRMapAssignmentParameters) {
	*out = *in
	if in.Blocks != nil {
		in, out := &in.Blocks, &out.Blocks
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapAssignmentParameters.
func (in *CIDRMapAssignmentParameters) DeepCopy() *CIDRMapAssignmentParameters {
	if in == nil {
		return nil
	}
	out := new(CIDRMapAssignmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapDefaultDatacenterInitParameters) DeepCopyInto(out *CIDRMapDefaultDatacenterInitParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapDefaultDatacenterInitParameters.
func (in *CIDRMapDefaultDatacenterInitParameters) DeepCopy() *CIDRMapDefaultDatacenterInitParameters {
	if in == nil {
		return nil
	}
	out := new(CIDRMapDefaultDatacenterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapDefaultDatacenterObservation) DeepCopyInto(out *CIDRMapDefaultDatacenterObservation) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapDefaultDatacenterObservation.
func (in *CIDRMapDefaultDatacenterObservation) DeepCopy() *CIDRMapDefaultDatacenterObservation {
	if in == nil {
		return nil
	}
	out := new(CIDRMapDefaultDatacenterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapDefaultDatacenterParameters) DeepCopyInto(out *CIDRMapDefaultDatacenterParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapDefaultDatacenterParameters.
func (in *CIDRMapDefaultDatacenterParameters) DeepCopy() *CIDRMapDefaultDatacenterParameters {
	if in == nil {
		return nil
	}
	out := new(CIDRMapDefaultDatacenterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapInitParameters) DeepCopyInto(out *CIDRMapInitParameters) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]CIDRMapAssignmentInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]CIDRMapDefaultDatacenterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapInitParameters.
func (in *CIDRMapInitParameters) DeepCopy() *CIDRMapInitParameters {
	if in == nil {
		return nil
	}
	out := new(CIDRMapInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapList) DeepCopyInto(out *CIDRMapList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CIDRMap, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapList.
func (in *CIDRMapList) DeepCopy() *CIDRMapList {
	if in == nil {
		return nil
	}
	out := new(CIDRMapList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *CIDRMapList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapObservation) DeepCopyInto(out *CIDRMapObservation) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]CIDRMapAssignmentObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]CIDRMapDefaultDatacenterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapObservation.
func (in *CIDRMapObservation) DeepCopy() *CIDRMapObservation {
	if in == nil {
		return nil
	}
	out := new(CIDRMapObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapParameters) DeepCopyInto(out *CIDRMapParameters) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]CIDRMapAssignmentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]CIDRMapDefaultDatacenterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapParameters.
func (in *CIDRMapParameters) DeepCopy() *CIDRMapParameters {
	if in == nil {
		return nil
	}
	out := new(CIDRMapParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapSpec) DeepCopyInto(out *CIDRMapSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapSpec.
func (in *CIDRMapSpec) DeepCopy() *CIDRMapSpec {
	if in == nil {
		return nil
	}
	out := new(CIDRMapSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CIDRMapStatus) DeepCopyInto(out *CIDRMapStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CIDRMapStatus.
func (in *CIDRMapStatus) DeepCopy() *CIDRMapStatus {
	if in == nil {
		return nil
	}
	out := new(CIDRMapStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Datacenter) DeepCopyInto(out *Datacenter) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Datacenter.
func (in *Datacenter) DeepCopy() *Datacenter {
	if in == nil {
		return nil
	}
	out := new(Datacenter)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Datacenter) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatacenterInitParameters) DeepCopyInto(out *DatacenterInitParameters) {
	*out = *in
	if in.City != nil {
		in, out := &in.City, &out.City
		*out = new(string)
		**out = **in
	}
	if in.CloneOf != nil {
		in, out := &in.CloneOf, &out.CloneOf
		*out = new(float64)
		**out = **in
	}
	if in.CloudServerHostHeaderOverride != nil {
		in, out := &in.CloudServerHostHeaderOverride, &out.CloudServerHostHeaderOverride
		*out = new(bool)
		**out = **in
	}
	if in.CloudServerTargeting != nil {
		in, out := &in.CloudServerTargeting, &out.CloudServerTargeting
		*out = new(bool)
		**out = **in
	}
	if in.Continent != nil {
		in, out := &in.Continent, &out.Continent
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.DefaultLoadObject != nil {
		in, out := &in.DefaultLoadObject, &out.DefaultLoadObject
		*out = make([]DefaultLoadObjectInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Latitude != nil {
		in, out := &in.Latitude, &out.Latitude
		*out = new(float64)
		**out = **in
	}
	if in.Longitude != nil {
		in, out := &in.Longitude, &out.Longitude
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
	if in.StateOrProvince != nil {
		in, out := &in.StateOrProvince, &out.StateOrProvince
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatacenterInitParameters.
func (in *DatacenterInitParameters) DeepCopy() *DatacenterInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatacenterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatacenterList) DeepCopyInto(out *DatacenterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Datacenter, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatacenterList.
func (in *DatacenterList) DeepCopy() *DatacenterList {
	if in == nil {
		return nil
	}
	out := new(DatacenterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatacenterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatacenterObservation) DeepCopyInto(out *DatacenterObservation) {
	*out = *in
	if in.City != nil {
		in, out := &in.City, &out.City
		*out = new(string)
		**out = **in
	}
	if in.CloneOf != nil {
		in, out := &in.CloneOf, &out.CloneOf
		*out = new(float64)
		**out = **in
	}
	if in.CloudServerHostHeaderOverride != nil {
		in, out := &in.CloudServerHostHeaderOverride, &out.CloudServerHostHeaderOverride
		*out = new(bool)
		**out = **in
	}
	if in.CloudServerTargeting != nil {
		in, out := &in.CloudServerTargeting, &out.CloudServerTargeting
		*out = new(bool)
		**out = **in
	}
	if in.Continent != nil {
		in, out := &in.Continent, &out.Continent
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.DefaultLoadObject != nil {
		in, out := &in.DefaultLoadObject, &out.DefaultLoadObject
		*out = make([]DefaultLoadObjectObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Latitude != nil {
		in, out := &in.Latitude, &out.Latitude
		*out = new(float64)
		**out = **in
	}
	if in.Longitude != nil {
		in, out := &in.Longitude, &out.Longitude
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
	if in.PingInterval != nil {
		in, out := &in.PingInterval, &out.PingInterval
		*out = new(float64)
		**out = **in
	}
	if in.PingPacketSize != nil {
		in, out := &in.PingPacketSize, &out.PingPacketSize
		*out = new(float64)
		**out = **in
	}
	if in.ScorePenalty != nil {
		in, out := &in.ScorePenalty, &out.ScorePenalty
		*out = new(float64)
		**out = **in
	}
	if in.ServermonitorLivenessCount != nil {
		in, out := &in.ServermonitorLivenessCount, &out.ServermonitorLivenessCount
		*out = new(float64)
		**out = **in
	}
	if in.ServermonitorLoadCount != nil {
		in, out := &in.ServermonitorLoadCount, &out.ServermonitorLoadCount
		*out = new(float64)
		**out = **in
	}
	if in.ServermonitorPool != nil {
		in, out := &in.ServermonitorPool, &out.ServermonitorPool
		*out = new(string)
		**out = **in
	}
	if in.StateOrProvince != nil {
		in, out := &in.StateOrProvince, &out.StateOrProvince
		*out = new(string)
		**out = **in
	}
	if in.Virtual != nil {
		in, out := &in.Virtual, &out.Virtual
		*out = new(bool)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatacenterObservation.
func (in *DatacenterObservation) DeepCopy() *DatacenterObservation {
	if in == nil {
		return nil
	}
	out := new(DatacenterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatacenterParameters) DeepCopyInto(out *DatacenterParameters) {
	*out = *in
	if in.City != nil {
		in, out := &in.City, &out.City
		*out = new(string)
		**out = **in
	}
	if in.CloneOf != nil {
		in, out := &in.CloneOf, &out.CloneOf
		*out = new(float64)
		**out = **in
	}
	if in.CloudServerHostHeaderOverride != nil {
		in, out := &in.CloudServerHostHeaderOverride, &out.CloudServerHostHeaderOverride
		*out = new(bool)
		**out = **in
	}
	if in.CloudServerTargeting != nil {
		in, out := &in.CloudServerTargeting, &out.CloudServerTargeting
		*out = new(bool)
		**out = **in
	}
	if in.Continent != nil {
		in, out := &in.Continent, &out.Continent
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.DefaultLoadObject != nil {
		in, out := &in.DefaultLoadObject, &out.DefaultLoadObject
		*out = make([]DefaultLoadObjectParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Latitude != nil {
		in, out := &in.Latitude, &out.Latitude
		*out = new(float64)
		**out = **in
	}
	if in.Longitude != nil {
		in, out := &in.Longitude, &out.Longitude
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
	if in.StateOrProvince != nil {
		in, out := &in.StateOrProvince, &out.StateOrProvince
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatacenterParameters.
func (in *DatacenterParameters) DeepCopy() *DatacenterParameters {
	if in == nil {
		return nil
	}
	out := new(DatacenterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatacenterSpec) DeepCopyInto(out *DatacenterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatacenterSpec.
func (in *DatacenterSpec) DeepCopy() *DatacenterSpec {
	if in == nil {
		return nil
	}
	out := new(DatacenterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatacenterStatus) DeepCopyInto(out *DatacenterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatacenterStatus.
func (in *DatacenterStatus) DeepCopy() *DatacenterStatus {
	if in == nil {
		return nil
	}
	out := new(DatacenterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DefaultDatacenterInitParameters) DeepCopyInto(out *DefaultDatacenterInitParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DefaultDatacenterInitParameters.
func (in *DefaultDatacenterInitParameters) DeepCopy() *DefaultDatacenterInitParameters {
	if in == nil {
		return nil
	}
	out := new(DefaultDatacenterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DefaultDatacenterObservation) DeepCopyInto(out *DefaultDatacenterObservation) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DefaultDatacenterObservation.
func (in *DefaultDatacenterObservation) DeepCopy() *DefaultDatacenterObservation {
	if in == nil {
		return nil
	}
	out := new(DefaultDatacenterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DefaultDatacenterParameters) DeepCopyInto(out *DefaultDatacenterParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DefaultDatacenterParameters.
func (in *DefaultDatacenterParameters) DeepCopy() *DefaultDatacenterParameters {
	if in == nil {
		return nil
	}
	out := new(DefaultDatacenterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DefaultLoadObjectInitParameters) DeepCopyInto(out *DefaultLoadObjectInitParameters) {
	*out = *in
	if in.LoadObject != nil {
		in, out := &in.LoadObject, &out.LoadObject
		*out = new(string)
		**out = **in
	}
	if in.LoadObjectPort != nil {
		in, out := &in.LoadObjectPort, &out.LoadObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.LoadServers != nil {
		in, out := &in.LoadServers, &out.LoadServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DefaultLoadObjectInitParameters.
func (in *DefaultLoadObjectInitParameters) DeepCopy() *DefaultLoadObjectInitParameters {
	if in == nil {
		return nil
	}
	out := new(DefaultLoadObjectInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DefaultLoadObjectObservation) DeepCopyInto(out *DefaultLoadObjectObservation) {
	*out = *in
	if in.LoadObject != nil {
		in, out := &in.LoadObject, &out.LoadObject
		*out = new(string)
		**out = **in
	}
	if in.LoadObjectPort != nil {
		in, out := &in.LoadObjectPort, &out.LoadObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.LoadServers != nil {
		in, out := &in.LoadServers, &out.LoadServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DefaultLoadObjectObservation.
func (in *DefaultLoadObjectObservation) DeepCopy() *DefaultLoadObjectObservation {
	if in == nil {
		return nil
	}
	out := new(DefaultLoadObjectObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DefaultLoadObjectParameters) DeepCopyInto(out *DefaultLoadObjectParameters) {
	*out = *in
	if in.LoadObject != nil {
		in, out := &in.LoadObject, &out.LoadObject
		*out = new(string)
		**out = **in
	}
	if in.LoadObjectPort != nil {
		in, out := &in.LoadObjectPort, &out.LoadObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.LoadServers != nil {
		in, out := &in.LoadServers, &out.LoadServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DefaultLoadObjectParameters.
func (in *DefaultLoadObjectParameters) DeepCopy() *DefaultLoadObjectParameters {
	if in == nil {
		return nil
	}
	out := new(DefaultLoadObjectParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Domain) DeepCopyInto(out *Domain) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Domain.
func (in *Domain) DeepCopy() *Domain {
	if in == nil {
		return nil
	}
	out := new(Domain)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Domain) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainInitParameters) DeepCopyInto(out *DomainInitParameters) {
	*out = *in
	if in.CnameCoalescingEnabled != nil {
		in, out := &in.CnameCoalescingEnabled, &out.CnameCoalescingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Contract != nil {
		in, out := &in.Contract, &out.Contract
		*out = new(string)
		**out = **in
	}
	if in.DefaultErrorPenalty != nil {
		in, out := &in.DefaultErrorPenalty, &out.DefaultErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultSSLClientCertificate != nil {
		in, out := &in.DefaultSSLClientCertificate, &out.DefaultSSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.DefaultSSLClientPrivateKey != nil {
		in, out := &in.DefaultSSLClientPrivateKey, &out.DefaultSSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeoutPenalty != nil {
		in, out := &in.DefaultTimeoutPenalty, &out.DefaultTimeoutPenalty
		*out = new(float64)
		**out = **in
	}
	if in.EmailNotificationList != nil {
		in, out := &in.EmailNotificationList, &out.EmailNotificationList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EndUserMappingEnabled != nil {
		in, out := &in.EndUserMappingEnabled, &out.EndUserMappingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.LoadFeedback != nil {
		in, out := &in.LoadFeedback, &out.LoadFeedback
		*out = new(bool)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SignAndServe != nil {
		in, out := &in.SignAndServe, &out.SignAndServe
		*out = new(bool)
		**out = **in
	}
	if in.SignAndServeAlgorithm != nil {
		in, out := &in.SignAndServeAlgorithm, &out.SignAndServeAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainInitParameters.
func (in *DomainInitParameters) DeepCopy() *DomainInitParameters {
	if in == nil {
		return nil
	}
	out := new(DomainInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainList) DeepCopyInto(out *DomainList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Domain, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainList.
func (in *DomainList) DeepCopy() *DomainList {
	if in == nil {
		return nil
	}
	out := new(DomainList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DomainList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainObservation) DeepCopyInto(out *DomainObservation) {
	*out = *in
	if in.CnameCoalescingEnabled != nil {
		in, out := &in.CnameCoalescingEnabled, &out.CnameCoalescingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Contract != nil {
		in, out := &in.Contract, &out.Contract
		*out = new(string)
		**out = **in
	}
	if in.DefaultErrorPenalty != nil {
		in, out := &in.DefaultErrorPenalty, &out.DefaultErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultHealthMax != nil {
		in, out := &in.DefaultHealthMax, &out.DefaultHealthMax
		*out = new(float64)
		**out = **in
	}
	if in.DefaultHealthMultiplier != nil {
		in, out := &in.DefaultHealthMultiplier, &out.DefaultHealthMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.DefaultHealthThreshold != nil {
		in, out := &in.DefaultHealthThreshold, &out.DefaultHealthThreshold
		*out = new(float64)
		**out = **in
	}
	if in.DefaultMaxUnreachablePenalty != nil {
		in, out := &in.DefaultMaxUnreachablePenalty, &out.DefaultMaxUnreachablePenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultSSLClientCertificate != nil {
		in, out := &in.DefaultSSLClientCertificate, &out.DefaultSSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.DefaultSSLClientPrivateKey != nil {
		in, out := &in.DefaultSSLClientPrivateKey, &out.DefaultSSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeoutPenalty != nil {
		in, out := &in.DefaultTimeoutPenalty, &out.DefaultTimeoutPenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultUnreachableThreshold != nil {
		in, out := &in.DefaultUnreachableThreshold, &out.DefaultUnreachableThreshold
		*out = new(float64)
		**out = **in
	}
	if in.EmailNotificationList != nil {
		in, out := &in.EmailNotificationList, &out.EmailNotificationList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EndUserMappingEnabled != nil {
		in, out := &in.EndUserMappingEnabled, &out.EndUserMappingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LoadFeedback != nil {
		in, out := &in.LoadFeedback, &out.LoadFeedback
		*out = new(bool)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.MapUpdateInterval != nil {
		in, out := &in.MapUpdateInterval, &out.MapUpdateInterval
		*out = new(float64)
		**out = **in
	}
	if in.MaxProperties != nil {
		in, out := &in.MaxProperties, &out.MaxProperties
		*out = new(float64)
		**out = **in
	}
	if in.MaxResources != nil {
		in, out := &in.MaxResources, &out.MaxResources
		*out = new(float64)
		**out = **in
	}
	if in.MaxTTL != nil {
		in, out := &in.MaxTTL, &out.MaxTTL
		*out = new(float64)
		**out = **in
	}
	if in.MaxTestTimeout != nil {
		in, out := &in.MaxTestTimeout, &out.MaxTestTimeout
		*out = new(float64)
		**out = **in
	}
	if in.MinPingableRegionFraction != nil {
		in, out := &in.MinPingableRegionFraction, &out.MinPingableRegionFraction
		*out = new(float64)
		**out = **in
	}
	if in.MinTTL != nil {
		in, out := &in.MinTTL, &out.MinTTL
		*out = new(float64)
		**out = **in
	}
	if in.MinTestInterval != nil {
		in, out := &in.MinTestInterval, &out.MinTestInterval
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PingInterval != nil {
		in, out := &in.PingInterval, &out.PingInterval
		*out = new(float64)
		**out = **in
	}
	if in.PingPacketSize != nil {
		in, out := &in.PingPacketSize, &out.PingPacketSize
		*out = new(float64)
		**out = **in
	}
	if in.RoundRobinPrefix != nil {
		in, out := &in.RoundRobinPrefix, &out.RoundRobinPrefix
		*out = new(string)
		**out = **in
	}
	if in.ServermonitorLivenessCount != nil {
		in, out := &in.ServermonitorLivenessCount, &out.ServermonitorLivenessCount
		*out = new(float64)
		**out = **in
	}
	if in.ServermonitorLoadCount != nil {
		in, out := &in.ServermonitorLoadCount, &out.ServermonitorLoadCount
		*out = new(float64)
		**out = **in
	}
	if in.ServermonitorPool != nil {
		in, out := &in.ServermonitorPool, &out.ServermonitorPool
		*out = new(string)
		**out = **in
	}
	if in.SignAndServe != nil {
		in, out := &in.SignAndServe, &out.SignAndServe
		*out = new(bool)
		**out = **in
	}
	if in.SignAndServeAlgorithm != nil {
		in, out := &in.SignAndServeAlgorithm, &out.SignAndServeAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainObservation.
func (in *DomainObservation) DeepCopy() *DomainObservation {
	if in == nil {
		return nil
	}
	out := new(DomainObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainParameters) DeepCopyInto(out *DomainParameters) {
	*out = *in
	if in.CnameCoalescingEnabled != nil {
		in, out := &in.CnameCoalescingEnabled, &out.CnameCoalescingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Contract != nil {
		in, out := &in.Contract, &out.Contract
		*out = new(string)
		**out = **in
	}
	if in.DefaultErrorPenalty != nil {
		in, out := &in.DefaultErrorPenalty, &out.DefaultErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.DefaultSSLClientCertificate != nil {
		in, out := &in.DefaultSSLClientCertificate, &out.DefaultSSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.DefaultSSLClientPrivateKey != nil {
		in, out := &in.DefaultSSLClientPrivateKey, &out.DefaultSSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.DefaultTimeoutPenalty != nil {
		in, out := &in.DefaultTimeoutPenalty, &out.DefaultTimeoutPenalty
		*out = new(float64)
		**out = **in
	}
	if in.EmailNotificationList != nil {
		in, out := &in.EmailNotificationList, &out.EmailNotificationList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EndUserMappingEnabled != nil {
		in, out := &in.EndUserMappingEnabled, &out.EndUserMappingEnabled
		*out = new(bool)
		**out = **in
	}
	if in.Group != nil {
		in, out := &in.Group, &out.Group
		*out = new(string)
		**out = **in
	}
	if in.LoadFeedback != nil {
		in, out := &in.LoadFeedback, &out.LoadFeedback
		*out = new(bool)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SignAndServe != nil {
		in, out := &in.SignAndServe, &out.SignAndServe
		*out = new(bool)
		**out = **in
	}
	if in.SignAndServeAlgorithm != nil {
		in, out := &in.SignAndServeAlgorithm, &out.SignAndServeAlgorithm
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainParameters.
func (in *DomainParameters) DeepCopy() *DomainParameters {
	if in == nil {
		return nil
	}
	out := new(DomainParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainSpec) DeepCopyInto(out *DomainSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainSpec.
func (in *DomainSpec) DeepCopy() *DomainSpec {
	if in == nil {
		return nil
	}
	out := new(DomainSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DomainStatus) DeepCopyInto(out *DomainStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DomainStatus.
func (in *DomainStatus) DeepCopy() *DomainStatus {
	if in == nil {
		return nil
	}
	out := new(DomainStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMap) DeepCopyInto(out *GeoMap) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMap.
func (in *GeoMap) DeepCopy() *GeoMap {
	if in == nil {
		return nil
	}
	out := new(GeoMap)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GeoMap) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapAssignmentInitParameters) DeepCopyInto(out *GeoMapAssignmentInitParameters) {
	*out = *in
	if in.Countries != nil {
		in, out := &in.Countries, &out.Countries
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapAssignmentInitParameters.
func (in *GeoMapAssignmentInitParameters) DeepCopy() *GeoMapAssignmentInitParameters {
	if in == nil {
		return nil
	}
	out := new(GeoMapAssignmentInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapAssignmentObservation) DeepCopyInto(out *GeoMapAssignmentObservation) {
	*out = *in
	if in.Countries != nil {
		in, out := &in.Countries, &out.Countries
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapAssignmentObservation.
func (in *GeoMapAssignmentObservation) DeepCopy() *GeoMapAssignmentObservation {
	if in == nil {
		return nil
	}
	out := new(GeoMapAssignmentObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapAssignmentParameters) DeepCopyInto(out *GeoMapAssignmentParameters) {
	*out = *in
	if in.Countries != nil {
		in, out := &in.Countries, &out.Countries
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapAssignmentParameters.
func (in *GeoMapAssignmentParameters) DeepCopy() *GeoMapAssignmentParameters {
	if in == nil {
		return nil
	}
	out := new(GeoMapAssignmentParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapDefaultDatacenterInitParameters) DeepCopyInto(out *GeoMapDefaultDatacenterInitParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapDefaultDatacenterInitParameters.
func (in *GeoMapDefaultDatacenterInitParameters) DeepCopy() *GeoMapDefaultDatacenterInitParameters {
	if in == nil {
		return nil
	}
	out := new(GeoMapDefaultDatacenterInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapDefaultDatacenterObservation) DeepCopyInto(out *GeoMapDefaultDatacenterObservation) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapDefaultDatacenterObservation.
func (in *GeoMapDefaultDatacenterObservation) DeepCopy() *GeoMapDefaultDatacenterObservation {
	if in == nil {
		return nil
	}
	out := new(GeoMapDefaultDatacenterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapDefaultDatacenterParameters) DeepCopyInto(out *GeoMapDefaultDatacenterParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Nickname != nil {
		in, out := &in.Nickname, &out.Nickname
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapDefaultDatacenterParameters.
func (in *GeoMapDefaultDatacenterParameters) DeepCopy() *GeoMapDefaultDatacenterParameters {
	if in == nil {
		return nil
	}
	out := new(GeoMapDefaultDatacenterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapInitParameters) DeepCopyInto(out *GeoMapInitParameters) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]GeoMapAssignmentInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]GeoMapDefaultDatacenterInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapInitParameters.
func (in *GeoMapInitParameters) DeepCopy() *GeoMapInitParameters {
	if in == nil {
		return nil
	}
	out := new(GeoMapInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapList) DeepCopyInto(out *GeoMapList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GeoMap, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapList.
func (in *GeoMapList) DeepCopy() *GeoMapList {
	if in == nil {
		return nil
	}
	out := new(GeoMapList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GeoMapList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapObservation) DeepCopyInto(out *GeoMapObservation) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]GeoMapAssignmentObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]GeoMapDefaultDatacenterObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapObservation.
func (in *GeoMapObservation) DeepCopy() *GeoMapObservation {
	if in == nil {
		return nil
	}
	out := new(GeoMapObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapParameters) DeepCopyInto(out *GeoMapParameters) {
	*out = *in
	if in.Assignment != nil {
		in, out := &in.Assignment, &out.Assignment
		*out = make([]GeoMapAssignmentParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DefaultDatacenter != nil {
		in, out := &in.DefaultDatacenter, &out.DefaultDatacenter
		*out = make([]GeoMapDefaultDatacenterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapParameters.
func (in *GeoMapParameters) DeepCopy() *GeoMapParameters {
	if in == nil {
		return nil
	}
	out := new(GeoMapParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapSpec) DeepCopyInto(out *GeoMapSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapSpec.
func (in *GeoMapSpec) DeepCopy() *GeoMapSpec {
	if in == nil {
		return nil
	}
	out := new(GeoMapSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GeoMapStatus) DeepCopyInto(out *GeoMapStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GeoMapStatus.
func (in *GeoMapStatus) DeepCopy() *GeoMapStatus {
	if in == nil {
		return nil
	}
	out := new(GeoMapStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPHeaderInitParameters) DeepCopyInto(out *HTTPHeaderInitParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPHeaderInitParameters.
func (in *HTTPHeaderInitParameters) DeepCopy() *HTTPHeaderInitParameters {
	if in == nil {
		return nil
	}
	out := new(HTTPHeaderInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPHeaderObservation) DeepCopyInto(out *HTTPHeaderObservation) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPHeaderObservation.
func (in *HTTPHeaderObservation) DeepCopy() *HTTPHeaderObservation {
	if in == nil {
		return nil
	}
	out := new(HTTPHeaderObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HTTPHeaderParameters) DeepCopyInto(out *HTTPHeaderParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HTTPHeaderParameters.
func (in *HTTPHeaderParameters) DeepCopy() *HTTPHeaderParameters {
	if in == nil {
		return nil
	}
	out := new(HTTPHeaderParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LivenessTestInitParameters) DeepCopyInto(out *LivenessTestInitParameters) {
	*out = *in
	if in.AlternateCACertificates != nil {
		in, out := &in.AlternateCACertificates, &out.AlternateCACertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnswersRequired != nil {
		in, out := &in.AnswersRequired, &out.AnswersRequired
		*out = new(bool)
		**out = **in
	}
	if in.DisableNonstandardPortWarning != nil {
		in, out := &in.DisableNonstandardPortWarning, &out.DisableNonstandardPortWarning
		*out = new(bool)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.ErrorPenalty != nil {
		in, out := &in.ErrorPenalty, &out.ErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.HTTPError3Xx != nil {
		in, out := &in.HTTPError3Xx, &out.HTTPError3Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPError4Xx != nil {
		in, out := &in.HTTPError4Xx, &out.HTTPError4Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPError5Xx != nil {
		in, out := &in.HTTPError5Xx, &out.HTTPError5Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPHeader != nil {
		in, out := &in.HTTPHeader, &out.HTTPHeader
		*out = make([]HTTPHeaderInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.HTTPRequestBody != nil {
		in, out := &in.HTTPRequestBody, &out.HTTPRequestBody
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PeerCertificateVerification != nil {
		in, out := &in.PeerCertificateVerification, &out.PeerCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.Pre2023SecurityPosture != nil {
		in, out := &in.Pre2023SecurityPosture, &out.Pre2023SecurityPosture
		*out = new(bool)
		**out = **in
	}
	if in.RecursionRequested != nil {
		in, out := &in.RecursionRequested, &out.RecursionRequested
		*out = new(bool)
		**out = **in
	}
	if in.RequestString != nil {
		in, out := &in.RequestString, &out.RequestString
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
	if in.ResponseString != nil {
		in, out := &in.ResponseString, &out.ResponseString
		*out = new(string)
		**out = **in
	}
	if in.SSLClientCertificate != nil {
		in, out := &in.SSLClientCertificate, &out.SSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.SSLClientPrivateKey != nil {
		in, out := &in.SSLClientPrivateKey, &out.SSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.TestInterval != nil {
		in, out := &in.TestInterval, &out.TestInterval
		*out = new(float64)
		**out = **in
	}
	if in.TestObject != nil {
		in, out := &in.TestObject, &out.TestObject
		*out = new(string)
		**out = **in
	}
	if in.TestObjectPassword != nil {
		in, out := &in.TestObjectPassword, &out.TestObjectPassword
		*out = new(string)
		**out = **in
	}
	if in.TestObjectPort != nil {
		in, out := &in.TestObjectPort, &out.TestObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.TestObjectProtocol != nil {
		in, out := &in.TestObjectProtocol, &out.TestObjectProtocol
		*out = new(string)
		**out = **in
	}
	if in.TestObjectUsername != nil {
		in, out := &in.TestObjectUsername, &out.TestObjectUsername
		*out = new(string)
		**out = **in
	}
	if in.TestTimeout != nil {
		in, out := &in.TestTimeout, &out.TestTimeout
		*out = new(float64)
		**out = **in
	}
	if in.TimeoutPenalty != nil {
		in, out := &in.TimeoutPenalty, &out.TimeoutPenalty
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LivenessTestInitParameters.
func (in *LivenessTestInitParameters) DeepCopy() *LivenessTestInitParameters {
	if in == nil {
		return nil
	}
	out := new(LivenessTestInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LivenessTestObservation) DeepCopyInto(out *LivenessTestObservation) {
	*out = *in
	if in.AlternateCACertificates != nil {
		in, out := &in.AlternateCACertificates, &out.AlternateCACertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnswersRequired != nil {
		in, out := &in.AnswersRequired, &out.AnswersRequired
		*out = new(bool)
		**out = **in
	}
	if in.DisableNonstandardPortWarning != nil {
		in, out := &in.DisableNonstandardPortWarning, &out.DisableNonstandardPortWarning
		*out = new(bool)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.ErrorPenalty != nil {
		in, out := &in.ErrorPenalty, &out.ErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.HTTPError3Xx != nil {
		in, out := &in.HTTPError3Xx, &out.HTTPError3Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPError4Xx != nil {
		in, out := &in.HTTPError4Xx, &out.HTTPError4Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPError5Xx != nil {
		in, out := &in.HTTPError5Xx, &out.HTTPError5Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPHeader != nil {
		in, out := &in.HTTPHeader, &out.HTTPHeader
		*out = make([]HTTPHeaderObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.HTTPRequestBody != nil {
		in, out := &in.HTTPRequestBody, &out.HTTPRequestBody
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PeerCertificateVerification != nil {
		in, out := &in.PeerCertificateVerification, &out.PeerCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.Pre2023SecurityPosture != nil {
		in, out := &in.Pre2023SecurityPosture, &out.Pre2023SecurityPosture
		*out = new(bool)
		**out = **in
	}
	if in.RecursionRequested != nil {
		in, out := &in.RecursionRequested, &out.RecursionRequested
		*out = new(bool)
		**out = **in
	}
	if in.RequestString != nil {
		in, out := &in.RequestString, &out.RequestString
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
	if in.ResponseString != nil {
		in, out := &in.ResponseString, &out.ResponseString
		*out = new(string)
		**out = **in
	}
	if in.SSLClientCertificate != nil {
		in, out := &in.SSLClientCertificate, &out.SSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.SSLClientPrivateKey != nil {
		in, out := &in.SSLClientPrivateKey, &out.SSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.TestInterval != nil {
		in, out := &in.TestInterval, &out.TestInterval
		*out = new(float64)
		**out = **in
	}
	if in.TestObject != nil {
		in, out := &in.TestObject, &out.TestObject
		*out = new(string)
		**out = **in
	}
	if in.TestObjectPassword != nil {
		in, out := &in.TestObjectPassword, &out.TestObjectPassword
		*out = new(string)
		**out = **in
	}
	if in.TestObjectPort != nil {
		in, out := &in.TestObjectPort, &out.TestObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.TestObjectProtocol != nil {
		in, out := &in.TestObjectProtocol, &out.TestObjectProtocol
		*out = new(string)
		**out = **in
	}
	if in.TestObjectUsername != nil {
		in, out := &in.TestObjectUsername, &out.TestObjectUsername
		*out = new(string)
		**out = **in
	}
	if in.TestTimeout != nil {
		in, out := &in.TestTimeout, &out.TestTimeout
		*out = new(float64)
		**out = **in
	}
	if in.TimeoutPenalty != nil {
		in, out := &in.TimeoutPenalty, &out.TimeoutPenalty
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LivenessTestObservation.
func (in *LivenessTestObservation) DeepCopy() *LivenessTestObservation {
	if in == nil {
		return nil
	}
	out := new(LivenessTestObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LivenessTestParameters) DeepCopyInto(out *LivenessTestParameters) {
	*out = *in
	if in.AlternateCACertificates != nil {
		in, out := &in.AlternateCACertificates, &out.AlternateCACertificates
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AnswersRequired != nil {
		in, out := &in.AnswersRequired, &out.AnswersRequired
		*out = new(bool)
		**out = **in
	}
	if in.DisableNonstandardPortWarning != nil {
		in, out := &in.DisableNonstandardPortWarning, &out.DisableNonstandardPortWarning
		*out = new(bool)
		**out = **in
	}
	if in.Disabled != nil {
		in, out := &in.Disabled, &out.Disabled
		*out = new(bool)
		**out = **in
	}
	if in.ErrorPenalty != nil {
		in, out := &in.ErrorPenalty, &out.ErrorPenalty
		*out = new(float64)
		**out = **in
	}
	if in.HTTPError3Xx != nil {
		in, out := &in.HTTPError3Xx, &out.HTTPError3Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPError4Xx != nil {
		in, out := &in.HTTPError4Xx, &out.HTTPError4Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPError5Xx != nil {
		in, out := &in.HTTPError5Xx, &out.HTTPError5Xx
		*out = new(bool)
		**out = **in
	}
	if in.HTTPHeader != nil {
		in, out := &in.HTTPHeader, &out.HTTPHeader
		*out = make([]HTTPHeaderParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HTTPMethod != nil {
		in, out := &in.HTTPMethod, &out.HTTPMethod
		*out = new(string)
		**out = **in
	}
	if in.HTTPRequestBody != nil {
		in, out := &in.HTTPRequestBody, &out.HTTPRequestBody
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.PeerCertificateVerification != nil {
		in, out := &in.PeerCertificateVerification, &out.PeerCertificateVerification
		*out = new(bool)
		**out = **in
	}
	if in.Pre2023SecurityPosture != nil {
		in, out := &in.Pre2023SecurityPosture, &out.Pre2023SecurityPosture
		*out = new(bool)
		**out = **in
	}
	if in.RecursionRequested != nil {
		in, out := &in.RecursionRequested, &out.RecursionRequested
		*out = new(bool)
		**out = **in
	}
	if in.RequestString != nil {
		in, out := &in.RequestString, &out.RequestString
		*out = new(string)
		**out = **in
	}
	if in.ResourceType != nil {
		in, out := &in.ResourceType, &out.ResourceType
		*out = new(string)
		**out = **in
	}
	if in.ResponseString != nil {
		in, out := &in.ResponseString, &out.ResponseString
		*out = new(string)
		**out = **in
	}
	if in.SSLClientCertificate != nil {
		in, out := &in.SSLClientCertificate, &out.SSLClientCertificate
		*out = new(string)
		**out = **in
	}
	if in.SSLClientPrivateKey != nil {
		in, out := &in.SSLClientPrivateKey, &out.SSLClientPrivateKey
		*out = new(string)
		**out = **in
	}
	if in.TestInterval != nil {
		in, out := &in.TestInterval, &out.TestInterval
		*out = new(float64)
		**out = **in
	}
	if in.TestObject != nil {
		in, out := &in.TestObject, &out.TestObject
		*out = new(string)
		**out = **in
	}
	if in.TestObjectPassword != nil {
		in, out := &in.TestObjectPassword, &out.TestObjectPassword
		*out = new(string)
		**out = **in
	}
	if in.TestObjectPort != nil {
		in, out := &in.TestObjectPort, &out.TestObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.TestObjectProtocol != nil {
		in, out := &in.TestObjectProtocol, &out.TestObjectProtocol
		*out = new(string)
		**out = **in
	}
	if in.TestObjectUsername != nil {
		in, out := &in.TestObjectUsername, &out.TestObjectUsername
		*out = new(string)
		**out = **in
	}
	if in.TestTimeout != nil {
		in, out := &in.TestTimeout, &out.TestTimeout
		*out = new(float64)
		**out = **in
	}
	if in.TimeoutPenalty != nil {
		in, out := &in.TimeoutPenalty, &out.TimeoutPenalty
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LivenessTestParameters.
func (in *LivenessTestParameters) DeepCopy() *LivenessTestParameters {
	if in == nil {
		return nil
	}
	out := new(LivenessTestParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Property) DeepCopyInto(out *Property) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Property.
func (in *Property) DeepCopy() *Property {
	if in == nil {
		return nil
	}
	out := new(Property)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Property) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertyInitParameters) DeepCopyInto(out *PropertyInitParameters) {
	*out = *in
	if in.BackupCname != nil {
		in, out := &in.BackupCname, &out.BackupCname
		*out = new(string)
		**out = **in
	}
	if in.BackupIP != nil {
		in, out := &in.BackupIP, &out.BackupIP
		*out = new(string)
		**out = **in
	}
	if in.BalanceByDownloadScore != nil {
		in, out := &in.BalanceByDownloadScore, &out.BalanceByDownloadScore
		*out = new(bool)
		**out = **in
	}
	if in.Cname != nil {
		in, out := &in.Cname, &out.Cname
		*out = new(string)
		**out = **in
	}
	if in.Comments != nil {
		in, out := &in.Comments, &out.Comments
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DynamicTTL != nil {
		in, out := &in.DynamicTTL, &out.DynamicTTL
		*out = new(float64)
		**out = **in
	}
	if in.FailbackDelay != nil {
		in, out := &in.FailbackDelay, &out.FailbackDelay
		*out = new(float64)
		**out = **in
	}
	if in.FailoverDelay != nil {
		in, out := &in.FailoverDelay, &out.FailoverDelay
		*out = new(float64)
		**out = **in
	}
	if in.GhostDemandReporting != nil {
		in, out := &in.GhostDemandReporting, &out.GhostDemandReporting
		*out = new(bool)
		**out = **in
	}
	if in.HandoutLimit != nil {
		in, out := &in.HandoutLimit, &out.HandoutLimit
		*out = new(float64)
		**out = **in
	}
	if in.HandoutMode != nil {
		in, out := &in.HandoutMode, &out.HandoutMode
		*out = new(string)
		**out = **in
	}
	if in.HealthMax != nil {
		in, out := &in.HealthMax, &out.HealthMax
		*out = new(float64)
		**out = **in
	}
	if in.HealthMultiplier != nil {
		in, out := &in.HealthMultiplier, &out.HealthMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.HealthThreshold != nil {
		in, out := &in.HealthThreshold, &out.HealthThreshold
		*out = new(float64)
		**out = **in
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = new(bool)
		**out = **in
	}
	if in.LivenessTest != nil {
		in, out := &in.LivenessTest, &out.LivenessTest
		*out = make([]LivenessTestInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.MapName != nil {
		in, out := &in.MapName, &out.MapName
		*out = new(string)
		**out = **in
	}
	if in.MaxUnreachablePenalty != nil {
		in, out := &in.MaxUnreachablePenalty, &out.MaxUnreachablePenalty
		*out = new(float64)
		**out = **in
	}
	if in.MinLiveFraction != nil {
		in, out := &in.MinLiveFraction, &out.MinLiveFraction
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScoreAggregationType != nil {
		in, out := &in.ScoreAggregationType, &out.ScoreAggregationType
		*out = new(string)
		**out = **in
	}
	if in.StaticRrSet != nil {
		in, out := &in.StaticRrSet, &out.StaticRrSet
		*out = make([]StaticRrSetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StickinessBonusConstant != nil {
		in, out := &in.StickinessBonusConstant, &out.StickinessBonusConstant
		*out = new(float64)
		**out = **in
	}
	if in.StickinessBonusPercentage != nil {
		in, out := &in.StickinessBonusPercentage, &out.StickinessBonusPercentage
		*out = new(float64)
		**out = **in
	}
	if in.TrafficTarget != nil {
		in, out := &in.TrafficTarget, &out.TrafficTarget
		*out = make([]TrafficTargetInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UnreachableThreshold != nil {
		in, out := &in.UnreachableThreshold, &out.UnreachableThreshold
		*out = new(float64)
		**out = **in
	}
	if in.UseComputedTargets != nil {
		in, out := &in.UseComputedTargets, &out.UseComputedTargets
		*out = new(bool)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertyInitParameters.
func (in *PropertyInitParameters) DeepCopy() *PropertyInitParameters {
	if in == nil {
		return nil
	}
	out := new(PropertyInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertyList) DeepCopyInto(out *PropertyList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Property, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertyList.
func (in *PropertyList) DeepCopy() *PropertyList {
	if in == nil {
		return nil
	}
	out := new(PropertyList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PropertyList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertyObservation) DeepCopyInto(out *PropertyObservation) {
	*out = *in
	if in.BackupCname != nil {
		in, out := &in.BackupCname, &out.BackupCname
		*out = new(string)
		**out = **in
	}
	if in.BackupIP != nil {
		in, out := &in.BackupIP, &out.BackupIP
		*out = new(string)
		**out = **in
	}
	if in.BalanceByDownloadScore != nil {
		in, out := &in.BalanceByDownloadScore, &out.BalanceByDownloadScore
		*out = new(bool)
		**out = **in
	}
	if in.Cname != nil {
		in, out := &in.Cname, &out.Cname
		*out = new(string)
		**out = **in
	}
	if in.Comments != nil {
		in, out := &in.Comments, &out.Comments
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DynamicTTL != nil {
		in, out := &in.DynamicTTL, &out.DynamicTTL
		*out = new(float64)
		**out = **in
	}
	if in.FailbackDelay != nil {
		in, out := &in.FailbackDelay, &out.FailbackDelay
		*out = new(float64)
		**out = **in
	}
	if in.FailoverDelay != nil {
		in, out := &in.FailoverDelay, &out.FailoverDelay
		*out = new(float64)
		**out = **in
	}
	if in.GhostDemandReporting != nil {
		in, out := &in.GhostDemandReporting, &out.GhostDemandReporting
		*out = new(bool)
		**out = **in
	}
	if in.HandoutLimit != nil {
		in, out := &in.HandoutLimit, &out.HandoutLimit
		*out = new(float64)
		**out = **in
	}
	if in.HandoutMode != nil {
		in, out := &in.HandoutMode, &out.HandoutMode
		*out = new(string)
		**out = **in
	}
	if in.HealthMax != nil {
		in, out := &in.HealthMax, &out.HealthMax
		*out = new(float64)
		**out = **in
	}
	if in.HealthMultiplier != nil {
		in, out := &in.HealthMultiplier, &out.HealthMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.HealthThreshold != nil {
		in, out := &in.HealthThreshold, &out.HealthThreshold
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = new(bool)
		**out = **in
	}
	if in.LivenessTest != nil {
		in, out := &in.LivenessTest, &out.LivenessTest
		*out = make([]LivenessTestObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.MapName != nil {
		in, out := &in.MapName, &out.MapName
		*out = new(string)
		**out = **in
	}
	if in.MaxUnreachablePenalty != nil {
		in, out := &in.MaxUnreachablePenalty, &out.MaxUnreachablePenalty
		*out = new(float64)
		**out = **in
	}
	if in.MinLiveFraction != nil {
		in, out := &in.MinLiveFraction, &out.MinLiveFraction
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScoreAggregationType != nil {
		in, out := &in.ScoreAggregationType, &out.ScoreAggregationType
		*out = new(string)
		**out = **in
	}
	if in.StaticRrSet != nil {
		in, out := &in.StaticRrSet, &out.StaticRrSet
		*out = make([]StaticRrSetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StickinessBonusConstant != nil {
		in, out := &in.StickinessBonusConstant, &out.StickinessBonusConstant
		*out = new(float64)
		**out = **in
	}
	if in.StickinessBonusPercentage != nil {
		in, out := &in.StickinessBonusPercentage, &out.StickinessBonusPercentage
		*out = new(float64)
		**out = **in
	}
	if in.TrafficTarget != nil {
		in, out := &in.TrafficTarget, &out.TrafficTarget
		*out = make([]TrafficTargetObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UnreachableThreshold != nil {
		in, out := &in.UnreachableThreshold, &out.UnreachableThreshold
		*out = new(float64)
		**out = **in
	}
	if in.UseComputedTargets != nil {
		in, out := &in.UseComputedTargets, &out.UseComputedTargets
		*out = new(bool)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
	if in.WeightedHashBitsForIPv4 != nil {
		in, out := &in.WeightedHashBitsForIPv4, &out.WeightedHashBitsForIPv4
		*out = new(float64)
		**out = **in
	}
	if in.WeightedHashBitsForIPv6 != nil {
		in, out := &in.WeightedHashBitsForIPv6, &out.WeightedHashBitsForIPv6
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertyObservation.
func (in *PropertyObservation) DeepCopy() *PropertyObservation {
	if in == nil {
		return nil
	}
	out := new(PropertyObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertyParameters) DeepCopyInto(out *PropertyParameters) {
	*out = *in
	if in.BackupCname != nil {
		in, out := &in.BackupCname, &out.BackupCname
		*out = new(string)
		**out = **in
	}
	if in.BackupIP != nil {
		in, out := &in.BackupIP, &out.BackupIP
		*out = new(string)
		**out = **in
	}
	if in.BalanceByDownloadScore != nil {
		in, out := &in.BalanceByDownloadScore, &out.BalanceByDownloadScore
		*out = new(bool)
		**out = **in
	}
	if in.Cname != nil {
		in, out := &in.Cname, &out.Cname
		*out = new(string)
		**out = **in
	}
	if in.Comments != nil {
		in, out := &in.Comments, &out.Comments
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.DynamicTTL != nil {
		in, out := &in.DynamicTTL, &out.DynamicTTL
		*out = new(float64)
		**out = **in
	}
	if in.FailbackDelay != nil {
		in, out := &in.FailbackDelay, &out.FailbackDelay
		*out = new(float64)
		**out = **in
	}
	if in.FailoverDelay != nil {
		in, out := &in.FailoverDelay, &out.FailoverDelay
		*out = new(float64)
		**out = **in
	}
	if in.GhostDemandReporting != nil {
		in, out := &in.GhostDemandReporting, &out.GhostDemandReporting
		*out = new(bool)
		**out = **in
	}
	if in.HandoutLimit != nil {
		in, out := &in.HandoutLimit, &out.HandoutLimit
		*out = new(float64)
		**out = **in
	}
	if in.HandoutMode != nil {
		in, out := &in.HandoutMode, &out.HandoutMode
		*out = new(string)
		**out = **in
	}
	if in.HealthMax != nil {
		in, out := &in.HealthMax, &out.HealthMax
		*out = new(float64)
		**out = **in
	}
	if in.HealthMultiplier != nil {
		in, out := &in.HealthMultiplier, &out.HealthMultiplier
		*out = new(float64)
		**out = **in
	}
	if in.HealthThreshold != nil {
		in, out := &in.HealthThreshold, &out.HealthThreshold
		*out = new(float64)
		**out = **in
	}
	if in.IPv6 != nil {
		in, out := &in.IPv6, &out.IPv6
		*out = new(bool)
		**out = **in
	}
	if in.LivenessTest != nil {
		in, out := &in.LivenessTest, &out.LivenessTest
		*out = make([]LivenessTestParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.MapName != nil {
		in, out := &in.MapName, &out.MapName
		*out = new(string)
		**out = **in
	}
	if in.MaxUnreachablePenalty != nil {
		in, out := &in.MaxUnreachablePenalty, &out.MaxUnreachablePenalty
		*out = new(float64)
		**out = **in
	}
	if in.MinLiveFraction != nil {
		in, out := &in.MinLiveFraction, &out.MinLiveFraction
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ScoreAggregationType != nil {
		in, out := &in.ScoreAggregationType, &out.ScoreAggregationType
		*out = new(string)
		**out = **in
	}
	if in.StaticRrSet != nil {
		in, out := &in.StaticRrSet, &out.StaticRrSet
		*out = make([]StaticRrSetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StickinessBonusConstant != nil {
		in, out := &in.StickinessBonusConstant, &out.StickinessBonusConstant
		*out = new(float64)
		**out = **in
	}
	if in.StickinessBonusPercentage != nil {
		in, out := &in.StickinessBonusPercentage, &out.StickinessBonusPercentage
		*out = new(float64)
		**out = **in
	}
	if in.TrafficTarget != nil {
		in, out := &in.TrafficTarget, &out.TrafficTarget
		*out = make([]TrafficTargetParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UnreachableThreshold != nil {
		in, out := &in.UnreachableThreshold, &out.UnreachableThreshold
		*out = new(float64)
		**out = **in
	}
	if in.UseComputedTargets != nil {
		in, out := &in.UseComputedTargets, &out.UseComputedTargets
		*out = new(bool)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertyParameters.
func (in *PropertyParameters) DeepCopy() *PropertyParameters {
	if in == nil {
		return nil
	}
	out := new(PropertyParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertySpec) DeepCopyInto(out *PropertySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertySpec.
func (in *PropertySpec) DeepCopy() *PropertySpec {
	if in == nil {
		return nil
	}
	out := new(PropertySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PropertyStatus) DeepCopyInto(out *PropertyStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PropertyStatus.
func (in *PropertyStatus) DeepCopy() *PropertyStatus {
	if in == nil {
		return nil
	}
	out := new(PropertyStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Resource) DeepCopyInto(out *Resource) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Resource.
func (in *Resource) DeepCopy() *Resource {
	if in == nil {
		return nil
	}
	out := new(Resource)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Resource) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceInitParameters) DeepCopyInto(out *ResourceInitParameters) {
	*out = *in
	if in.AggregationType != nil {
		in, out := &in.AggregationType, &out.AggregationType
		*out = new(string)
		**out = **in
	}
	if in.ConstrainedProperty != nil {
		in, out := &in.ConstrainedProperty, &out.ConstrainedProperty
		*out = new(string)
		**out = **in
	}
	if in.DecayRate != nil {
		in, out := &in.DecayRate, &out.DecayRate
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostHeader != nil {
		in, out := &in.HostHeader, &out.HostHeader
		*out = new(string)
		**out = **in
	}
	if in.LeaderString != nil {
		in, out := &in.LeaderString, &out.LeaderString
		*out = new(string)
		**out = **in
	}
	if in.LeastSquaresDecay != nil {
		in, out := &in.LeastSquaresDecay, &out.LeastSquaresDecay
		*out = new(float64)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.MaxUMultiplicativeIncrement != nil {
		in, out := &in.MaxUMultiplicativeIncrement, &out.MaxUMultiplicativeIncrement
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceInstance != nil {
		in, out := &in.ResourceInstance, &out.ResourceInstance
		*out = make([]ResourceInstanceInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpperBound != nil {
		in, out := &in.UpperBound, &out.UpperBound
		*out = new(float64)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceInitParameters.
func (in *ResourceInitParameters) DeepCopy() *ResourceInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceInstanceInitParameters) DeepCopyInto(out *ResourceInstanceInitParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.LoadObject != nil {
		in, out := &in.LoadObject, &out.LoadObject
		*out = new(string)
		**out = **in
	}
	if in.LoadObjectPort != nil {
		in, out := &in.LoadObjectPort, &out.LoadObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.LoadServers != nil {
		in, out := &in.LoadServers, &out.LoadServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseDefaultLoadObject != nil {
		in, out := &in.UseDefaultLoadObject, &out.UseDefaultLoadObject
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceInstanceInitParameters.
func (in *ResourceInstanceInitParameters) DeepCopy() *ResourceInstanceInitParameters {
	if in == nil {
		return nil
	}
	out := new(ResourceInstanceInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceInstanceObservation) DeepCopyInto(out *ResourceInstanceObservation) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.LoadObject != nil {
		in, out := &in.LoadObject, &out.LoadObject
		*out = new(string)
		**out = **in
	}
	if in.LoadObjectPort != nil {
		in, out := &in.LoadObjectPort, &out.LoadObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.LoadServers != nil {
		in, out := &in.LoadServers, &out.LoadServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseDefaultLoadObject != nil {
		in, out := &in.UseDefaultLoadObject, &out.UseDefaultLoadObject
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceInstanceObservation.
func (in *ResourceInstanceObservation) DeepCopy() *ResourceInstanceObservation {
	if in == nil {
		return nil
	}
	out := new(ResourceInstanceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceInstanceParameters) DeepCopyInto(out *ResourceInstanceParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.LoadObject != nil {
		in, out := &in.LoadObject, &out.LoadObject
		*out = new(string)
		**out = **in
	}
	if in.LoadObjectPort != nil {
		in, out := &in.LoadObjectPort, &out.LoadObjectPort
		*out = new(float64)
		**out = **in
	}
	if in.LoadServers != nil {
		in, out := &in.LoadServers, &out.LoadServers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UseDefaultLoadObject != nil {
		in, out := &in.UseDefaultLoadObject, &out.UseDefaultLoadObject
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceInstanceParameters.
func (in *ResourceInstanceParameters) DeepCopy() *ResourceInstanceParameters {
	if in == nil {
		return nil
	}
	out := new(ResourceInstanceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceList) DeepCopyInto(out *ResourceList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Resource, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceList.
func (in *ResourceList) DeepCopy() *ResourceList {
	if in == nil {
		return nil
	}
	out := new(ResourceList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ResourceList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceObservation) DeepCopyInto(out *ResourceObservation) {
	*out = *in
	if in.AggregationType != nil {
		in, out := &in.AggregationType, &out.AggregationType
		*out = new(string)
		**out = **in
	}
	if in.ConstrainedProperty != nil {
		in, out := &in.ConstrainedProperty, &out.ConstrainedProperty
		*out = new(string)
		**out = **in
	}
	if in.DecayRate != nil {
		in, out := &in.DecayRate, &out.DecayRate
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostHeader != nil {
		in, out := &in.HostHeader, &out.HostHeader
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LeaderString != nil {
		in, out := &in.LeaderString, &out.LeaderString
		*out = new(string)
		**out = **in
	}
	if in.LeastSquaresDecay != nil {
		in, out := &in.LeastSquaresDecay, &out.LeastSquaresDecay
		*out = new(float64)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.MaxUMultiplicativeIncrement != nil {
		in, out := &in.MaxUMultiplicativeIncrement, &out.MaxUMultiplicativeIncrement
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceInstance != nil {
		in, out := &in.ResourceInstance, &out.ResourceInstance
		*out = make([]ResourceInstanceObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpperBound != nil {
		in, out := &in.UpperBound, &out.UpperBound
		*out = new(float64)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceObservation.
func (in *ResourceObservation) DeepCopy() *ResourceObservation {
	if in == nil {
		return nil
	}
	out := new(ResourceObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceParameters) DeepCopyInto(out *ResourceParameters) {
	*out = *in
	if in.AggregationType != nil {
		in, out := &in.AggregationType, &out.AggregationType
		*out = new(string)
		**out = **in
	}
	if in.ConstrainedProperty != nil {
		in, out := &in.ConstrainedProperty, &out.ConstrainedProperty
		*out = new(string)
		**out = **in
	}
	if in.DecayRate != nil {
		in, out := &in.DecayRate, &out.DecayRate
		*out = new(float64)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Domain != nil {
		in, out := &in.Domain, &out.Domain
		*out = new(string)
		**out = **in
	}
	if in.HostHeader != nil {
		in, out := &in.HostHeader, &out.HostHeader
		*out = new(string)
		**out = **in
	}
	if in.LeaderString != nil {
		in, out := &in.LeaderString, &out.LeaderString
		*out = new(string)
		**out = **in
	}
	if in.LeastSquaresDecay != nil {
		in, out := &in.LeastSquaresDecay, &out.LeastSquaresDecay
		*out = new(float64)
		**out = **in
	}
	if in.LoadImbalancePercentage != nil {
		in, out := &in.LoadImbalancePercentage, &out.LoadImbalancePercentage
		*out = new(float64)
		**out = **in
	}
	if in.MaxUMultiplicativeIncrement != nil {
		in, out := &in.MaxUMultiplicativeIncrement, &out.MaxUMultiplicativeIncrement
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceInstance != nil {
		in, out := &in.ResourceInstance, &out.ResourceInstance
		*out = make([]ResourceInstanceParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.UpperBound != nil {
		in, out := &in.UpperBound, &out.UpperBound
		*out = new(float64)
		**out = **in
	}
	if in.WaitOnComplete != nil {
		in, out := &in.WaitOnComplete, &out.WaitOnComplete
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceParameters.
func (in *ResourceParameters) DeepCopy() *ResourceParameters {
	if in == nil {
		return nil
	}
	out := new(ResourceParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceSpec) DeepCopyInto(out *ResourceSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceSpec.
func (in *ResourceSpec) DeepCopy() *ResourceSpec {
	if in == nil {
		return nil
	}
	out := new(ResourceSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourceStatus) DeepCopyInto(out *ResourceStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourceStatus.
func (in *ResourceStatus) DeepCopy() *ResourceStatus {
	if in == nil {
		return nil
	}
	out := new(ResourceStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StaticRrSetInitParameters) DeepCopyInto(out *StaticRrSetInitParameters) {
	*out = *in
	if in.Rdata != nil {
		in, out := &in.Rdata, &out.Rdata
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StaticRrSetInitParameters.
func (in *StaticRrSetInitParameters) DeepCopy() *StaticRrSetInitParameters {
	if in == nil {
		return nil
	}
	out := new(StaticRrSetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StaticRrSetObservation) DeepCopyInto(out *StaticRrSetObservation) {
	*out = *in
	if in.Rdata != nil {
		in, out := &in.Rdata, &out.Rdata
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StaticRrSetObservation.
func (in *StaticRrSetObservation) DeepCopy() *StaticRrSetObservation {
	if in == nil {
		return nil
	}
	out := new(StaticRrSetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StaticRrSetParameters) DeepCopyInto(out *StaticRrSetParameters) {
	*out = *in
	if in.Rdata != nil {
		in, out := &in.Rdata, &out.Rdata
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TTL != nil {
		in, out := &in.TTL, &out.TTL
		*out = new(float64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StaticRrSetParameters.
func (in *StaticRrSetParameters) DeepCopy() *StaticRrSetParameters {
	if in == nil {
		return nil
	}
	out := new(StaticRrSetParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficTargetInitParameters) DeepCopyInto(out *TrafficTargetInitParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HandoutCname != nil {
		in, out := &in.HandoutCname, &out.HandoutCname
		*out = new(string)
		**out = **in
	}
	if in.Precedence != nil {
		in, out := &in.Precedence, &out.Precedence
		*out = new(float64)
		**out = **in
	}
	if in.Servers != nil {
		in, out := &in.Servers, &out.Servers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficTargetInitParameters.
func (in *TrafficTargetInitParameters) DeepCopy() *TrafficTargetInitParameters {
	if in == nil {
		return nil
	}
	out := new(TrafficTargetInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficTargetObservation) DeepCopyInto(out *TrafficTargetObservation) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HandoutCname != nil {
		in, out := &in.HandoutCname, &out.HandoutCname
		*out = new(string)
		**out = **in
	}
	if in.Precedence != nil {
		in, out := &in.Precedence, &out.Precedence
		*out = new(float64)
		**out = **in
	}
	if in.Servers != nil {
		in, out := &in.Servers, &out.Servers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficTargetObservation.
func (in *TrafficTargetObservation) DeepCopy() *TrafficTargetObservation {
	if in == nil {
		return nil
	}
	out := new(TrafficTargetObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TrafficTargetParameters) DeepCopyInto(out *TrafficTargetParameters) {
	*out = *in
	if in.DatacenterID != nil {
		in, out := &in.DatacenterID, &out.DatacenterID
		*out = new(float64)
		**out = **in
	}
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.HandoutCname != nil {
		in, out := &in.HandoutCname, &out.HandoutCname
		*out = new(string)
		**out = **in
	}
	if in.Precedence != nil {
		in, out := &in.Precedence, &out.Precedence
		*out = new(float64)
		**out = **in
	}
	if in.Servers != nil {
		in, out := &in.Servers, &out.Servers
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Weight != nil {
		in, out := &in.Weight, &out.Weight
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TrafficTargetParameters.
func (in *TrafficTargetParameters) DeepCopy() *TrafficTargetParameters {
	if in == nil {
		return nil
	}
	out := new(TrafficTargetParameters)
	in.DeepCopyInto(out)
	return out
}
