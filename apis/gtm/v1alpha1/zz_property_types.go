// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HTTPHeaderInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HTTPHeaderObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HTTPHeaderParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LivenessTestInitParameters struct {
	AlternateCACertificates []*string `json:"alternateCaCertificates,omitempty" tf:"alternate_ca_certificates,omitempty"`

	AnswersRequired *bool `json:"answersRequired,omitempty" tf:"answers_required,omitempty"`

	DisableNonstandardPortWarning *bool `json:"disableNonstandardPortWarning,omitempty" tf:"disable_nonstandard_port_warning,omitempty"`

	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	ErrorPenalty *float64 `json:"errorPenalty,omitempty" tf:"error_penalty,omitempty"`

	HTTPError3Xx *bool `json:"httpError3Xx,omitempty" tf:"http_error3xx,omitempty"`

	HTTPError4Xx *bool `json:"httpError4Xx,omitempty" tf:"http_error4xx,omitempty"`

	HTTPError5Xx *bool `json:"httpError5Xx,omitempty" tf:"http_error5xx,omitempty"`

	HTTPHeader []HTTPHeaderInitParameters `json:"httpHeader,omitempty" tf:"http_header,omitempty"`

	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PeerCertificateVerification *bool `json:"peerCertificateVerification,omitempty" tf:"peer_certificate_verification,omitempty"`

	// Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
	Pre2023SecurityPosture *bool `json:"pre2023SecurityPosture,omitempty" tf:"pre_2023_security_posture,omitempty"`

	RecursionRequested *bool `json:"recursionRequested,omitempty" tf:"recursion_requested,omitempty"`

	RequestString *string `json:"requestString,omitempty" tf:"request_string,omitempty"`

	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	ResponseString *string `json:"responseString,omitempty" tf:"response_string,omitempty"`

	SSLClientCertificate *string `json:"sslClientCertificate,omitempty" tf:"ssl_client_certificate,omitempty"`

	SSLClientPrivateKey *string `json:"sslClientPrivateKey,omitempty" tf:"ssl_client_private_key,omitempty"`

	TestInterval *float64 `json:"testInterval,omitempty" tf:"test_interval,omitempty"`

	TestObject *string `json:"testObject,omitempty" tf:"test_object,omitempty"`

	TestObjectPassword *string `json:"testObjectPassword,omitempty" tf:"test_object_password,omitempty"`

	TestObjectPort *float64 `json:"testObjectPort,omitempty" tf:"test_object_port,omitempty"`

	TestObjectProtocol *string `json:"testObjectProtocol,omitempty" tf:"test_object_protocol,omitempty"`

	TestObjectUsername *string `json:"testObjectUsername,omitempty" tf:"test_object_username,omitempty"`

	TestTimeout *float64 `json:"testTimeout,omitempty" tf:"test_timeout,omitempty"`

	TimeoutPenalty *float64 `json:"timeoutPenalty,omitempty" tf:"timeout_penalty,omitempty"`
}

type LivenessTestObservation struct {
	AlternateCACertificates []*string `json:"alternateCaCertificates,omitempty" tf:"alternate_ca_certificates,omitempty"`

	AnswersRequired *bool `json:"answersRequired,omitempty" tf:"answers_required,omitempty"`

	DisableNonstandardPortWarning *bool `json:"disableNonstandardPortWarning,omitempty" tf:"disable_nonstandard_port_warning,omitempty"`

	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	ErrorPenalty *float64 `json:"errorPenalty,omitempty" tf:"error_penalty,omitempty"`

	HTTPError3Xx *bool `json:"httpError3Xx,omitempty" tf:"http_error3xx,omitempty"`

	HTTPError4Xx *bool `json:"httpError4Xx,omitempty" tf:"http_error4xx,omitempty"`

	HTTPError5Xx *bool `json:"httpError5Xx,omitempty" tf:"http_error5xx,omitempty"`

	HTTPHeader []HTTPHeaderObservation `json:"httpHeader,omitempty" tf:"http_header,omitempty"`

	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PeerCertificateVerification *bool `json:"peerCertificateVerification,omitempty" tf:"peer_certificate_verification,omitempty"`

	// Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
	Pre2023SecurityPosture *bool `json:"pre2023SecurityPosture,omitempty" tf:"pre_2023_security_posture,omitempty"`

	RecursionRequested *bool `json:"recursionRequested,omitempty" tf:"recursion_requested,omitempty"`

	RequestString *string `json:"requestString,omitempty" tf:"request_string,omitempty"`

	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	ResponseString *string `json:"responseString,omitempty" tf:"response_string,omitempty"`

	SSLClientCertificate *string `json:"sslClientCertificate,omitempty" tf:"ssl_client_certificate,omitempty"`

	SSLClientPrivateKey *string `json:"sslClientPrivateKey,omitempty" tf:"ssl_client_private_key,omitempty"`

	TestInterval *float64 `json:"testInterval,omitempty" tf:"test_interval,omitempty"`

	TestObject *string `json:"testObject,omitempty" tf:"test_object,omitempty"`

	TestObjectPassword *string `json:"testObjectPassword,omitempty" tf:"test_object_password,omitempty"`

	TestObjectPort *float64 `json:"testObjectPort,omitempty" tf:"test_object_port,omitempty"`

	TestObjectProtocol *string `json:"testObjectProtocol,omitempty" tf:"test_object_protocol,omitempty"`

	TestObjectUsername *string `json:"testObjectUsername,omitempty" tf:"test_object_username,omitempty"`

	TestTimeout *float64 `json:"testTimeout,omitempty" tf:"test_timeout,omitempty"`

	TimeoutPenalty *float64 `json:"timeoutPenalty,omitempty" tf:"timeout_penalty,omitempty"`
}

type LivenessTestParameters struct {

	// +kubebuilder:validation:Optional
	AlternateCACertificates []*string `json:"alternateCaCertificates,omitempty" tf:"alternate_ca_certificates,omitempty"`

	// +kubebuilder:validation:Optional
	AnswersRequired *bool `json:"answersRequired,omitempty" tf:"answers_required,omitempty"`

	// +kubebuilder:validation:Optional
	DisableNonstandardPortWarning *bool `json:"disableNonstandardPortWarning,omitempty" tf:"disable_nonstandard_port_warning,omitempty"`

	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// +kubebuilder:validation:Optional
	ErrorPenalty *float64 `json:"errorPenalty,omitempty" tf:"error_penalty,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPError3Xx *bool `json:"httpError3Xx,omitempty" tf:"http_error3xx,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPError4Xx *bool `json:"httpError4Xx,omitempty" tf:"http_error4xx,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPError5Xx *bool `json:"httpError5Xx,omitempty" tf:"http_error5xx,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPHeader []HTTPHeaderParameters `json:"httpHeader,omitempty" tf:"http_header,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PeerCertificateVerification *bool `json:"peerCertificateVerification,omitempty" tf:"peer_certificate_verification,omitempty"`

	// Whether to enable backwards compatibility for liveness endpoints that use older TLS protocols
	// +kubebuilder:validation:Optional
	Pre2023SecurityPosture *bool `json:"pre2023SecurityPosture,omitempty" tf:"pre_2023_security_posture,omitempty"`

	// +kubebuilder:validation:Optional
	RecursionRequested *bool `json:"recursionRequested,omitempty" tf:"recursion_requested,omitempty"`

	// +kubebuilder:validation:Optional
	RequestString *string `json:"requestString,omitempty" tf:"request_string,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceType *string `json:"resourceType,omitempty" tf:"resource_type,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseString *string `json:"responseString,omitempty" tf:"response_string,omitempty"`

	// +kubebuilder:validation:Optional
	SSLClientCertificate *string `json:"sslClientCertificate,omitempty" tf:"ssl_client_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	SSLClientPrivateKey *string `json:"sslClientPrivateKey,omitempty" tf:"ssl_client_private_key,omitempty"`

	// +kubebuilder:validation:Optional
	TestInterval *float64 `json:"testInterval" tf:"test_interval,omitempty"`

	// +kubebuilder:validation:Optional
	TestObject *string `json:"testObject,omitempty" tf:"test_object,omitempty"`

	// +kubebuilder:validation:Optional
	TestObjectPassword *string `json:"testObjectPassword,omitempty" tf:"test_object_password,omitempty"`

	// +kubebuilder:validation:Optional
	TestObjectPort *float64 `json:"testObjectPort,omitempty" tf:"test_object_port,omitempty"`

	// +kubebuilder:validation:Optional
	TestObjectProtocol *string `json:"testObjectProtocol" tf:"test_object_protocol,omitempty"`

	// +kubebuilder:validation:Optional
	TestObjectUsername *string `json:"testObjectUsername,omitempty" tf:"test_object_username,omitempty"`

	// +kubebuilder:validation:Optional
	TestTimeout *float64 `json:"testTimeout" tf:"test_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	TimeoutPenalty *float64 `json:"timeoutPenalty,omitempty" tf:"timeout_penalty,omitempty"`
}

type PropertyInitParameters struct {
	BackupCname *string `json:"backupCname,omitempty" tf:"backup_cname,omitempty"`

	BackupIP *string `json:"backupIp,omitempty" tf:"backup_ip,omitempty"`

	BalanceByDownloadScore *bool `json:"balanceByDownloadScore,omitempty" tf:"balance_by_download_score,omitempty"`

	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	DynamicTTL *float64 `json:"dynamicTtl,omitempty" tf:"dynamic_ttl,omitempty"`

	FailbackDelay *float64 `json:"failbackDelay,omitempty" tf:"failback_delay,omitempty"`

	FailoverDelay *float64 `json:"failoverDelay,omitempty" tf:"failover_delay,omitempty"`

	GhostDemandReporting *bool `json:"ghostDemandReporting,omitempty" tf:"ghost_demand_reporting,omitempty"`

	HandoutLimit *float64 `json:"handoutLimit,omitempty" tf:"handout_limit,omitempty"`

	HandoutMode *string `json:"handoutMode,omitempty" tf:"handout_mode,omitempty"`

	HealthMax *float64 `json:"healthMax,omitempty" tf:"health_max,omitempty"`

	HealthMultiplier *float64 `json:"healthMultiplier,omitempty" tf:"health_multiplier,omitempty"`

	HealthThreshold *float64 `json:"healthThreshold,omitempty" tf:"health_threshold,omitempty"`

	IPv6 *bool `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	LivenessTest []LivenessTestInitParameters `json:"livenessTest,omitempty" tf:"liveness_test,omitempty"`

	LoadImbalancePercentage *float64 `json:"loadImbalancePercentage,omitempty" tf:"load_imbalance_percentage,omitempty"`

	MapName *string `json:"mapName,omitempty" tf:"map_name,omitempty"`

	MaxUnreachablePenalty *float64 `json:"maxUnreachablePenalty,omitempty" tf:"max_unreachable_penalty,omitempty"`

	MinLiveFraction *float64 `json:"minLiveFraction,omitempty" tf:"min_live_fraction,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ScoreAggregationType *string `json:"scoreAggregationType,omitempty" tf:"score_aggregation_type,omitempty"`

	StaticRrSet []StaticRrSetInitParameters `json:"staticRrSet,omitempty" tf:"static_rr_set,omitempty"`

	StickinessBonusConstant *float64 `json:"stickinessBonusConstant,omitempty" tf:"stickiness_bonus_constant,omitempty"`

	StickinessBonusPercentage *float64 `json:"stickinessBonusPercentage,omitempty" tf:"stickiness_bonus_percentage,omitempty"`

	TrafficTarget []TrafficTargetInitParameters `json:"trafficTarget,omitempty" tf:"traffic_target,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UnreachableThreshold *float64 `json:"unreachableThreshold,omitempty" tf:"unreachable_threshold,omitempty"`

	UseComputedTargets *bool `json:"useComputedTargets,omitempty" tf:"use_computed_targets,omitempty"`

	WaitOnComplete *bool `json:"waitOnComplete,omitempty" tf:"wait_on_complete,omitempty"`
}

type PropertyObservation struct {
	BackupCname *string `json:"backupCname,omitempty" tf:"backup_cname,omitempty"`

	BackupIP *string `json:"backupIp,omitempty" tf:"backup_ip,omitempty"`

	BalanceByDownloadScore *bool `json:"balanceByDownloadScore,omitempty" tf:"balance_by_download_score,omitempty"`

	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	DynamicTTL *float64 `json:"dynamicTtl,omitempty" tf:"dynamic_ttl,omitempty"`

	FailbackDelay *float64 `json:"failbackDelay,omitempty" tf:"failback_delay,omitempty"`

	FailoverDelay *float64 `json:"failoverDelay,omitempty" tf:"failover_delay,omitempty"`

	GhostDemandReporting *bool `json:"ghostDemandReporting,omitempty" tf:"ghost_demand_reporting,omitempty"`

	HandoutLimit *float64 `json:"handoutLimit,omitempty" tf:"handout_limit,omitempty"`

	HandoutMode *string `json:"handoutMode,omitempty" tf:"handout_mode,omitempty"`

	HealthMax *float64 `json:"healthMax,omitempty" tf:"health_max,omitempty"`

	HealthMultiplier *float64 `json:"healthMultiplier,omitempty" tf:"health_multiplier,omitempty"`

	HealthThreshold *float64 `json:"healthThreshold,omitempty" tf:"health_threshold,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPv6 *bool `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	LivenessTest []LivenessTestObservation `json:"livenessTest,omitempty" tf:"liveness_test,omitempty"`

	LoadImbalancePercentage *float64 `json:"loadImbalancePercentage,omitempty" tf:"load_imbalance_percentage,omitempty"`

	MapName *string `json:"mapName,omitempty" tf:"map_name,omitempty"`

	MaxUnreachablePenalty *float64 `json:"maxUnreachablePenalty,omitempty" tf:"max_unreachable_penalty,omitempty"`

	MinLiveFraction *float64 `json:"minLiveFraction,omitempty" tf:"min_live_fraction,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ScoreAggregationType *string `json:"scoreAggregationType,omitempty" tf:"score_aggregation_type,omitempty"`

	StaticRrSet []StaticRrSetObservation `json:"staticRrSet,omitempty" tf:"static_rr_set,omitempty"`

	StickinessBonusConstant *float64 `json:"stickinessBonusConstant,omitempty" tf:"stickiness_bonus_constant,omitempty"`

	StickinessBonusPercentage *float64 `json:"stickinessBonusPercentage,omitempty" tf:"stickiness_bonus_percentage,omitempty"`

	TrafficTarget []TrafficTargetObservation `json:"trafficTarget,omitempty" tf:"traffic_target,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UnreachableThreshold *float64 `json:"unreachableThreshold,omitempty" tf:"unreachable_threshold,omitempty"`

	UseComputedTargets *bool `json:"useComputedTargets,omitempty" tf:"use_computed_targets,omitempty"`

	WaitOnComplete *bool `json:"waitOnComplete,omitempty" tf:"wait_on_complete,omitempty"`

	WeightedHashBitsForIPv4 *float64 `json:"weightedHashBitsForIpv4,omitempty" tf:"weighted_hash_bits_for_ipv4,omitempty"`

	WeightedHashBitsForIPv6 *float64 `json:"weightedHashBitsForIpv6,omitempty" tf:"weighted_hash_bits_for_ipv6,omitempty"`
}

type PropertyParameters struct {

	// +kubebuilder:validation:Optional
	BackupCname *string `json:"backupCname,omitempty" tf:"backup_cname,omitempty"`

	// +kubebuilder:validation:Optional
	BackupIP *string `json:"backupIp,omitempty" tf:"backup_ip,omitempty"`

	// +kubebuilder:validation:Optional
	BalanceByDownloadScore *bool `json:"balanceByDownloadScore,omitempty" tf:"balance_by_download_score,omitempty"`

	// +kubebuilder:validation:Optional
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`

	// +kubebuilder:validation:Optional
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicTTL *float64 `json:"dynamicTtl,omitempty" tf:"dynamic_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	FailbackDelay *float64 `json:"failbackDelay,omitempty" tf:"failback_delay,omitempty"`

	// +kubebuilder:validation:Optional
	FailoverDelay *float64 `json:"failoverDelay,omitempty" tf:"failover_delay,omitempty"`

	// +kubebuilder:validation:Optional
	GhostDemandReporting *bool `json:"ghostDemandReporting,omitempty" tf:"ghost_demand_reporting,omitempty"`

	// +kubebuilder:validation:Optional
	HandoutLimit *float64 `json:"handoutLimit,omitempty" tf:"handout_limit,omitempty"`

	// +kubebuilder:validation:Optional
	HandoutMode *string `json:"handoutMode,omitempty" tf:"handout_mode,omitempty"`

	// +kubebuilder:validation:Optional
	HealthMax *float64 `json:"healthMax,omitempty" tf:"health_max,omitempty"`

	// +kubebuilder:validation:Optional
	HealthMultiplier *float64 `json:"healthMultiplier,omitempty" tf:"health_multiplier,omitempty"`

	// +kubebuilder:validation:Optional
	HealthThreshold *float64 `json:"healthThreshold,omitempty" tf:"health_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	IPv6 *bool `json:"ipv6,omitempty" tf:"ipv6,omitempty"`

	// +kubebuilder:validation:Optional
	LivenessTest []LivenessTestParameters `json:"livenessTest,omitempty" tf:"liveness_test,omitempty"`

	// +kubebuilder:validation:Optional
	LoadImbalancePercentage *float64 `json:"loadImbalancePercentage,omitempty" tf:"load_imbalance_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	MapName *string `json:"mapName,omitempty" tf:"map_name,omitempty"`

	// +kubebuilder:validation:Optional
	MaxUnreachablePenalty *float64 `json:"maxUnreachablePenalty,omitempty" tf:"max_unreachable_penalty,omitempty"`

	// +kubebuilder:validation:Optional
	MinLiveFraction *float64 `json:"minLiveFraction,omitempty" tf:"min_live_fraction,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ScoreAggregationType *string `json:"scoreAggregationType,omitempty" tf:"score_aggregation_type,omitempty"`

	// +kubebuilder:validation:Optional
	StaticRrSet []StaticRrSetParameters `json:"staticRrSet,omitempty" tf:"static_rr_set,omitempty"`

	// +kubebuilder:validation:Optional
	StickinessBonusConstant *float64 `json:"stickinessBonusConstant,omitempty" tf:"stickiness_bonus_constant,omitempty"`

	// +kubebuilder:validation:Optional
	StickinessBonusPercentage *float64 `json:"stickinessBonusPercentage,omitempty" tf:"stickiness_bonus_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	TrafficTarget []TrafficTargetParameters `json:"trafficTarget,omitempty" tf:"traffic_target,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UnreachableThreshold *float64 `json:"unreachableThreshold,omitempty" tf:"unreachable_threshold,omitempty"`

	// +kubebuilder:validation:Optional
	UseComputedTargets *bool `json:"useComputedTargets,omitempty" tf:"use_computed_targets,omitempty"`

	// +kubebuilder:validation:Optional
	WaitOnComplete *bool `json:"waitOnComplete,omitempty" tf:"wait_on_complete,omitempty"`
}

type StaticRrSetInitParameters struct {
	Rdata []*string `json:"rdata,omitempty" tf:"rdata,omitempty"`

	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StaticRrSetObservation struct {
	Rdata []*string `json:"rdata,omitempty" tf:"rdata,omitempty"`

	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StaticRrSetParameters struct {

	// +kubebuilder:validation:Optional
	Rdata []*string `json:"rdata,omitempty" tf:"rdata,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TrafficTargetInitParameters struct {
	DatacenterID *float64 `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	HandoutCname *string `json:"handoutCname,omitempty" tf:"handout_cname,omitempty"`

	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// +listType=set
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`

	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TrafficTargetObservation struct {
	DatacenterID *float64 `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	HandoutCname *string `json:"handoutCname,omitempty" tf:"handout_cname,omitempty"`

	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// +listType=set
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`

	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TrafficTargetParameters struct {

	// +kubebuilder:validation:Optional
	DatacenterID *float64 `json:"datacenterId,omitempty" tf:"datacenter_id,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	HandoutCname *string `json:"handoutCname,omitempty" tf:"handout_cname,omitempty"`

	// +kubebuilder:validation:Optional
	Precedence *float64 `json:"precedence,omitempty" tf:"precedence,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Servers []*string `json:"servers,omitempty" tf:"servers,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// PropertySpec defines the desired state of Property
type PropertySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PropertyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PropertyInitParameters `json:"initProvider,omitempty"`
}

// PropertyStatus defines the observed state of Property.
type PropertyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PropertyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Property is the Schema for the Propertys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type Property struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.domain) || (has(self.initProvider) && has(self.initProvider.domain))",message="spec.forProvider.domain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.handoutLimit) || (has(self.initProvider) && has(self.initProvider.handoutLimit))",message="spec.forProvider.handoutLimit is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.handoutMode) || (has(self.initProvider) && has(self.initProvider.handoutMode))",message="spec.forProvider.handoutMode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.scoreAggregationType) || (has(self.initProvider) && has(self.initProvider.scoreAggregationType))",message="spec.forProvider.scoreAggregationType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   PropertySpec   `json:"spec"`
	Status PropertyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PropertyList contains a list of Propertys
type PropertyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Property `json:"items"`
}

// Repository type metadata.
var (
	Property_Kind             = "Property"
	Property_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Property_Kind}.String()
	Property_KindAPIVersion   = Property_Kind + "." + CRDGroupVersion.String()
	Property_GroupVersionKind = CRDGroupVersion.WithKind(Property_Kind)
)

func init() {
	SchemeBuilder.Register(&Property{}, &PropertyList{})
}
