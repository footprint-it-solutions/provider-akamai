// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"dario.cat/mergo"
	"github.com/pkg/errors"

	"github.com/crossplane/upjet/pkg/resource"
	"github.com/crossplane/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this Datastream
func (mg *Datastream) GetTerraformResourceType() string {
	return "akamai_datastream"
}

// GetConnectionDetailsMapping for this Datastream
func (tr *Datastream) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"azure_connector[*].access_key": "azureConnector[*].accessKeySecretRef", "datadog_connector[*].auth_token": "datadogConnector[*].authTokenSecretRef", "elasticsearch_connector[*].ca_cert": "elasticsearchConnector[*].caCertSecretRef", "elasticsearch_connector[*].client_cert": "elasticsearchConnector[*].clientCertSecretRef", "elasticsearch_connector[*].client_key": "elasticsearchConnector[*].clientKeySecretRef", "elasticsearch_connector[*].index_name": "elasticsearchConnector[*].indexNameSecretRef", "elasticsearch_connector[*].password": "elasticsearchConnector[*].passwordSecretRef", "elasticsearch_connector[*].user_name": "elasticsearchConnector[*].userNameSecretRef", "gcs_connector[*].private_key": "gcsConnector[*].privateKeySecretRef", "https_connector[*].ca_cert": "httpsConnector[*].caCertSecretRef", "https_connector[*].client_cert": "httpsConnector[*].clientCertSecretRef", "https_connector[*].client_key": "httpsConnector[*].clientKeySecretRef", "https_connector[*].password": "httpsConnector[*].passwordSecretRef", "https_connector[*].user_name": "httpsConnector[*].userNameSecretRef", "loggly_connector[*].auth_token": "logglyConnector[*].authTokenSecretRef", "new_relic_connector[*].auth_token": "newRelicConnector[*].authTokenSecretRef", "oracle_connector[*].access_key": "oracleConnector[*].accessKeySecretRef", "oracle_connector[*].secret_access_key": "oracleConnector[*].secretAccessKeySecretRef", "s3_connector[*].access_key": "s3Connector[*].accessKeySecretRef", "s3_connector[*].secret_access_key": "s3Connector[*].secretAccessKeySecretRef", "splunk_connector[*].ca_cert": "splunkConnector[*].caCertSecretRef", "splunk_connector[*].client_cert": "splunkConnector[*].clientCertSecretRef", "splunk_connector[*].client_key": "splunkConnector[*].clientKeySecretRef", "splunk_connector[*].event_collector_token": "splunkConnector[*].eventCollectorTokenSecretRef", "sumologic_connector[*].collector_code": "sumologicConnector[*].collectorCodeSecretRef"}
}

// GetObservation of this Datastream
func (tr *Datastream) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Datastream
func (tr *Datastream) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Datastream
func (tr *Datastream) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Datastream
func (tr *Datastream) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Datastream
func (tr *Datastream) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// GetInitParameters of this Datastream
func (tr *Datastream) GetInitParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.InitProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// GetInitParameters of this Datastream
func (tr *Datastream) GetMergedParameters(shouldMergeInitProvider bool) (map[string]any, error) {
	params, err := tr.GetParameters()
	if err != nil {
		return nil, errors.Wrapf(err, "cannot get parameters for resource '%q'", tr.GetName())
	}
	if !shouldMergeInitProvider {
		return params, nil
	}

	initParams, err := tr.GetInitParameters()
	if err != nil {
		return nil, errors.Wrapf(err, "cannot get init parameters for resource '%q'", tr.GetName())
	}

	// Note(lsviben): mergo.WithSliceDeepCopy is needed to merge the
	// slices from the initProvider to forProvider. As it also sets
	// overwrite to true, we need to set it back to false, we don't
	// want to overwrite the forProvider fields with the initProvider
	// fields.
	err = mergo.Merge(&params, initParams, mergo.WithSliceDeepCopy, func(c *mergo.Config) {
		c.Overwrite = false
	})
	if err != nil {
		return nil, errors.Wrapf(err, "cannot merge spec.initProvider and spec.forProvider parameters for resource '%q'", tr.GetName())
	}

	return params, nil
}

// LateInitialize this Datastream using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Datastream) LateInitialize(attrs []byte) (bool, error) {
	params := &DatastreamParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Datastream) GetTerraformSchemaVersion() int {
	return 0
}
