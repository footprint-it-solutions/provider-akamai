// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupItemsInitParameters struct {

	// The name of the EdgeKV group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// A map of items within the specified group. Each item consists of an item key and a value.
	// +mapType=granular
	Items map[string]*string `json:"items,omitempty" tf:"items,omitempty"`

	// The name for the EdgeKV namespace.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// The network against which to execute the API request.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type GroupItemsObservation struct {

	// The name of the EdgeKV group.
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A map of items within the specified group. Each item consists of an item key and a value.
	// +mapType=granular
	Items map[string]*string `json:"items,omitempty" tf:"items,omitempty"`

	// The name for the EdgeKV namespace.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// The network against which to execute the API request.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type GroupItemsParameters struct {

	// The name of the EdgeKV group.
	// +kubebuilder:validation:Optional
	GroupName *string `json:"groupName,omitempty" tf:"group_name,omitempty"`

	// A map of items within the specified group. Each item consists of an item key and a value.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Items map[string]*string `json:"items,omitempty" tf:"items,omitempty"`

	// The name for the EdgeKV namespace.
	// +kubebuilder:validation:Optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// The network against which to execute the API request.
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

// GroupItemsSpec defines the desired state of GroupItems
type GroupItemsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupItemsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupItemsInitParameters `json:"initProvider,omitempty"`
}

// GroupItemsStatus defines the observed state of GroupItems.
type GroupItemsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupItemsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupItems is the Schema for the GroupItemss API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type GroupItems struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupName) || (has(self.initProvider) && has(self.initProvider.groupName))",message="spec.forProvider.groupName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.items) || (has(self.initProvider) && has(self.initProvider.items))",message="spec.forProvider.items is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.namespaceName) || (has(self.initProvider) && has(self.initProvider.namespaceName))",message="spec.forProvider.namespaceName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	Spec   GroupItemsSpec   `json:"spec"`
	Status GroupItemsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupItemsList contains a list of GroupItemss
type GroupItemsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupItems `json:"items"`
}

// Repository type metadata.
var (
	GroupItems_Kind             = "GroupItems"
	GroupItems_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupItems_Kind}.String()
	GroupItems_KindAPIVersion   = GroupItems_Kind + "." + CRDGroupVersion.String()
	GroupItems_GroupVersionKind = CRDGroupVersion.WithKind(GroupItems_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupItems{}, &GroupItemsList{})
}
