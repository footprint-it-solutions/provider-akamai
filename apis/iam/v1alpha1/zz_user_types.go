// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters struct {

	// The user's street address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// A user's per-group role assignments, in JSON form.
	AuthGrantsJSON *string `json:"authGrantsJson,omitempty" tf:"auth_grants_json,omitempty"`

	// The user's city.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// To help characterize the user, the value can be any that are available from the view-contact-types operation.
	ContactType *string `json:"contactType,omitempty" tf:"contact_type,omitempty"`

	// As part of the user's location, the value can be any that are available from the view-supported-countries operation.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// The user's email address.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Indicates whether multi-factor authentication is allowed.
	EnableMfa *bool `json:"enableMfa,omitempty" tf:"enable_mfa,omitempty"`

	// Indicates whether two-factor authentication is allowed.
	EnableTfa *bool `json:"enableTfa,omitempty" tf:"enable_tfa,omitempty"`

	// The user's first name.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// The user's position at your company.
	JobTitle *string `json:"jobTitle,omitempty" tf:"job_title,omitempty"`

	// The user's surname.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Flag to block a user account.
	Lock *bool `json:"lock,omitempty" tf:"lock,omitempty"`

	// The user's mobile phone number.
	MobilePhone *string `json:"mobilePhone,omitempty" tf:"mobile_phone,omitempty"`

	// New password for a user.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The user's main phone number.
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// The value can be any that are available from the view-languages operation.
	PreferredLanguage *string `json:"preferredLanguage,omitempty" tf:"preferred_language,omitempty"`

	// The user's secondary email address.
	SecondaryEmail *string `json:"secondaryEmail,omitempty" tf:"secondary_email,omitempty"`

	// The number of seconds it takes for the user's Control Center session to time out if there hasn't been any activity.
	SessionTimeout *float64 `json:"sessionTimeout,omitempty" tf:"session_timeout,omitempty"`

	// The user's state.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The user's time zone. The value can be any that are available from the view-time-zones operation.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// Specifies email notifications the user receives for products.
	UserNotifications []UserNotificationsInitParameters `json:"userNotifications,omitempty" tf:"user_notifications,omitempty"`

	// The user's five-digit ZIP code.
	ZipCode *string `json:"zipCode,omitempty" tf:"zip_code,omitempty"`
}

type UserNotificationsInitParameters struct {

	// Enables notifications for expiring API client credentials.
	APIClientCredentialExpiryNotification *bool `json:"apiClientCredentialExpiryNotification,omitempty" tf:"api_client_credential_expiry_notification,omitempty"`

	// Enables email notifications.
	EnableEmailNotifications *bool `json:"enableEmailNotifications,omitempty" tf:"enable_email_notifications,omitempty"`

	// Enables notifications for group administrators when the user creates other new users.
	NewUserNotification *bool `json:"newUserNotification,omitempty" tf:"new_user_notification,omitempty"`

	// Enables notifications for expiring passwords.
	PasswordExpiry *bool `json:"passwordExpiry,omitempty" tf:"password_expiry,omitempty"`

	// Products for which the user gets notifications for service issues.
	Proactive []*string `json:"proactive,omitempty" tf:"proactive,omitempty"`

	// Products for which the user receives notifications for upgrades.
	Upgrade []*string `json:"upgrade,omitempty" tf:"upgrade,omitempty"`
}

type UserNotificationsObservation struct {

	// Enables notifications for expiring API client credentials.
	APIClientCredentialExpiryNotification *bool `json:"apiClientCredentialExpiryNotification,omitempty" tf:"api_client_credential_expiry_notification,omitempty"`

	// Enables email notifications.
	EnableEmailNotifications *bool `json:"enableEmailNotifications,omitempty" tf:"enable_email_notifications,omitempty"`

	// Enables notifications for group administrators when the user creates other new users.
	NewUserNotification *bool `json:"newUserNotification,omitempty" tf:"new_user_notification,omitempty"`

	// Enables notifications for expiring passwords.
	PasswordExpiry *bool `json:"passwordExpiry,omitempty" tf:"password_expiry,omitempty"`

	// Products for which the user gets notifications for service issues.
	Proactive []*string `json:"proactive,omitempty" tf:"proactive,omitempty"`

	// Products for which the user receives notifications for upgrades.
	Upgrade []*string `json:"upgrade,omitempty" tf:"upgrade,omitempty"`
}

type UserNotificationsParameters struct {

	// Enables notifications for expiring API client credentials.
	// +kubebuilder:validation:Optional
	APIClientCredentialExpiryNotification *bool `json:"apiClientCredentialExpiryNotification,omitempty" tf:"api_client_credential_expiry_notification,omitempty"`

	// Enables email notifications.
	// +kubebuilder:validation:Optional
	EnableEmailNotifications *bool `json:"enableEmailNotifications" tf:"enable_email_notifications,omitempty"`

	// Enables notifications for group administrators when the user creates other new users.
	// +kubebuilder:validation:Optional
	NewUserNotification *bool `json:"newUserNotification,omitempty" tf:"new_user_notification,omitempty"`

	// Enables notifications for expiring passwords.
	// +kubebuilder:validation:Optional
	PasswordExpiry *bool `json:"passwordExpiry" tf:"password_expiry,omitempty"`

	// Products for which the user gets notifications for service issues.
	// +kubebuilder:validation:Optional
	Proactive []*string `json:"proactive" tf:"proactive,omitempty"`

	// Products for which the user receives notifications for upgrades.
	// +kubebuilder:validation:Optional
	Upgrade []*string `json:"upgrade" tf:"upgrade,omitempty"`
}

type UserObservation struct {

	// The user's street address.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// A user's per-group role assignments, in JSON form.
	AuthGrantsJSON *string `json:"authGrantsJson,omitempty" tf:"auth_grants_json,omitempty"`

	// The user's city.
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// To help characterize the user, the value can be any that are available from the view-contact-types operation.
	ContactType *string `json:"contactType,omitempty" tf:"contact_type,omitempty"`

	// As part of the user's location, the value can be any that are available from the view-supported-countries operation.
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// The user's email address.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Indicates whether email update is pending.
	EmailUpdatePending *bool `json:"emailUpdatePending,omitempty" tf:"email_update_pending,omitempty"`

	// Indicates whether multi-factor authentication is allowed.
	EnableMfa *bool `json:"enableMfa,omitempty" tf:"enable_mfa,omitempty"`

	// Indicates whether two-factor authentication is allowed.
	EnableTfa *bool `json:"enableTfa,omitempty" tf:"enable_tfa,omitempty"`

	// The user's first name.
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The user's position at your company.
	JobTitle *string `json:"jobTitle,omitempty" tf:"job_title,omitempty"`

	// ISO 8601 timestamp indicating when the user last logged in.
	LastLogin *string `json:"lastLogin,omitempty" tf:"last_login,omitempty"`

	// The user's surname.
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Flag to block a user account.
	Lock *bool `json:"lock,omitempty" tf:"lock,omitempty"`

	// The user's mobile phone number.
	MobilePhone *string `json:"mobilePhone,omitempty" tf:"mobile_phone,omitempty"`

	// The date a user's password expires.
	PasswordExpiredAfter *string `json:"passwordExpiredAfter,omitempty" tf:"password_expired_after,omitempty"`

	// The user's main phone number.
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// The value can be any that are available from the view-languages operation.
	PreferredLanguage *string `json:"preferredLanguage,omitempty" tf:"preferred_language,omitempty"`

	// The user's secondary email address.
	SecondaryEmail *string `json:"secondaryEmail,omitempty" tf:"secondary_email,omitempty"`

	// The number of seconds it takes for the user's Control Center session to time out if there hasn't been any activity.
	SessionTimeout *float64 `json:"sessionTimeout,omitempty" tf:"session_timeout,omitempty"`

	// The user's state.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// Indicates whether two-factor authentication is configured.
	TfaConfigured *bool `json:"tfaConfigured,omitempty" tf:"tfa_configured,omitempty"`

	// The user's time zone. The value can be any that are available from the view-time-zones operation.
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// A user's `loginId`. Typically, a user's email address.
	UserName *string `json:"userName,omitempty" tf:"user_name,omitempty"`

	// Specifies email notifications the user receives for products.
	UserNotifications []UserNotificationsObservation `json:"userNotifications,omitempty" tf:"user_notifications,omitempty"`

	// The user's five-digit ZIP code.
	ZipCode *string `json:"zipCode,omitempty" tf:"zip_code,omitempty"`
}

type UserParameters struct {

	// The user's street address.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// A user's per-group role assignments, in JSON form.
	// +kubebuilder:validation:Optional
	AuthGrantsJSON *string `json:"authGrantsJson,omitempty" tf:"auth_grants_json,omitempty"`

	// The user's city.
	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// To help characterize the user, the value can be any that are available from the view-contact-types operation.
	// +kubebuilder:validation:Optional
	ContactType *string `json:"contactType,omitempty" tf:"contact_type,omitempty"`

	// As part of the user's location, the value can be any that are available from the view-supported-countries operation.
	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// The user's email address.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// Indicates whether multi-factor authentication is allowed.
	// +kubebuilder:validation:Optional
	EnableMfa *bool `json:"enableMfa,omitempty" tf:"enable_mfa,omitempty"`

	// Indicates whether two-factor authentication is allowed.
	// +kubebuilder:validation:Optional
	EnableTfa *bool `json:"enableTfa,omitempty" tf:"enable_tfa,omitempty"`

	// The user's first name.
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// The user's position at your company.
	// +kubebuilder:validation:Optional
	JobTitle *string `json:"jobTitle,omitempty" tf:"job_title,omitempty"`

	// The user's surname.
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Flag to block a user account.
	// +kubebuilder:validation:Optional
	Lock *bool `json:"lock,omitempty" tf:"lock,omitempty"`

	// The user's mobile phone number.
	// +kubebuilder:validation:Optional
	MobilePhone *string `json:"mobilePhone,omitempty" tf:"mobile_phone,omitempty"`

	// New password for a user.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The user's main phone number.
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// The value can be any that are available from the view-languages operation.
	// +kubebuilder:validation:Optional
	PreferredLanguage *string `json:"preferredLanguage,omitempty" tf:"preferred_language,omitempty"`

	// The user's secondary email address.
	// +kubebuilder:validation:Optional
	SecondaryEmail *string `json:"secondaryEmail,omitempty" tf:"secondary_email,omitempty"`

	// The number of seconds it takes for the user's Control Center session to time out if there hasn't been any activity.
	// +kubebuilder:validation:Optional
	SessionTimeout *float64 `json:"sessionTimeout,omitempty" tf:"session_timeout,omitempty"`

	// The user's state.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The user's time zone. The value can be any that are available from the view-time-zones operation.
	// +kubebuilder:validation:Optional
	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	// Specifies email notifications the user receives for products.
	// +kubebuilder:validation:Optional
	UserNotifications []UserNotificationsParameters `json:"userNotifications,omitempty" tf:"user_notifications,omitempty"`

	// The user's five-digit ZIP code.
	// +kubebuilder:validation:Optional
	ZipCode *string `json:"zipCode,omitempty" tf:"zip_code,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.authGrantsJson) || (has(self.initProvider) && has(self.initProvider.authGrantsJson))",message="spec.forProvider.authGrantsJson is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.country) || (has(self.initProvider) && has(self.initProvider.country))",message="spec.forProvider.country is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.firstName) || (has(self.initProvider) && has(self.initProvider.firstName))",message="spec.forProvider.firstName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.lastName) || (has(self.initProvider) && has(self.initProvider.lastName))",message="spec.forProvider.lastName is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
