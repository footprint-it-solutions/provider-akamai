// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActivationInitParameters struct {

	// The ID given to the activation event while it's in progress.
	ActivationID *string `json:"activationId,omitempty" tf:"activation_id,omitempty"`

	// Automatically acknowledge all rule warnings for activation to continue. Default is false
	AutoAcknowledgeRuleWarnings *bool `json:"autoAcknowledgeRuleWarnings,omitempty" tf:"auto_acknowledge_rule_warnings,omitempty"`

	// Provides an audit record when activating on a production network.
	ComplianceRecord []ComplianceRecordInitParameters `json:"complianceRecord,omitempty" tf:"compliance_record,omitempty"`

	// One or more email addresses to which to send activation status changes.
	// +listType=set
	Contact []*string `json:"contact,omitempty" tf:"contact,omitempty"`

	// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Assigns a log message to the activation request.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Your property's ID, including the prp_ prefix.
	PropertyID *string `json:"propertyId,omitempty" tf:"property_id,omitempty"`

	// Your property's version number.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type ActivationObservation struct {

	// The ID given to the activation event while it's in progress.
	ActivationID *string `json:"activationId,omitempty" tf:"activation_id,omitempty"`

	// Automatically acknowledge all rule warnings for activation to continue. Default is false
	AutoAcknowledgeRuleWarnings *bool `json:"autoAcknowledgeRuleWarnings,omitempty" tf:"auto_acknowledge_rule_warnings,omitempty"`

	// Provides an audit record when activating on a production network.
	ComplianceRecord []ComplianceRecordObservation `json:"complianceRecord,omitempty" tf:"compliance_record,omitempty"`

	// One or more email addresses to which to send activation status changes.
	// +listType=set
	Contact []*string `json:"contact,omitempty" tf:"contact,omitempty"`

	// Errors returned during activation.
	Errors *string `json:"errors,omitempty" tf:"errors,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Assigns a log message to the activation request.
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Your property's ID, including the prp_ prefix.
	PropertyID *string `json:"propertyId,omitempty" tf:"property_id,omitempty"`

	// Any errors returned by the API about rules.
	RuleErrors []ActivationRuleErrorsObservation `json:"ruleErrors,omitempty" tf:"rule_errors,omitempty"`

	// The property version's activation status on the given network.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Your property's version number.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`

	// Warnings returned during activation.
	Warnings *string `json:"warnings,omitempty" tf:"warnings,omitempty"`
}

type ActivationParameters struct {

	// The ID given to the activation event while it's in progress.
	// +kubebuilder:validation:Optional
	ActivationID *string `json:"activationId,omitempty" tf:"activation_id,omitempty"`

	// Automatically acknowledge all rule warnings for activation to continue. Default is false
	// +kubebuilder:validation:Optional
	AutoAcknowledgeRuleWarnings *bool `json:"autoAcknowledgeRuleWarnings,omitempty" tf:"auto_acknowledge_rule_warnings,omitempty"`

	// Provides an audit record when activating on a production network.
	// +kubebuilder:validation:Optional
	ComplianceRecord []ComplianceRecordParameters `json:"complianceRecord,omitempty" tf:"compliance_record,omitempty"`

	// One or more email addresses to which to send activation status changes.
	// +kubebuilder:validation:Optional
	// +listType=set
	Contact []*string `json:"contact,omitempty" tf:"contact,omitempty"`

	// Akamai network in which to activate your property, either STAGING or PRODUCTION. The default is STAGING.
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Assigns a log message to the activation request.
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// Your property's ID, including the prp_ prefix.
	// +kubebuilder:validation:Optional
	PropertyID *string `json:"propertyId,omitempty" tf:"property_id,omitempty"`

	// Your property's version number.
	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type ActivationRuleErrorsInitParameters struct {
}

type ActivationRuleErrorsObservation struct {
	BehaviorName *string `json:"behaviorName,omitempty" tf:"behavior_name,omitempty"`

	Detail *string `json:"detail,omitempty" tf:"detail,omitempty"`

	ErrorLocation *string `json:"errorLocation,omitempty" tf:"error_location,omitempty"`

	Instance *string `json:"instance,omitempty" tf:"instance,omitempty"`

	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	Title *string `json:"title,omitempty" tf:"title,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ActivationRuleErrorsParameters struct {
}

type ComplianceRecordInitParameters struct {

	// Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
	NoncomplianceReasonEmergency []NoncomplianceReasonEmergencyInitParameters `json:"noncomplianceReasonEmergency,omitempty" tf:"noncompliance_reason_emergency,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
	NoncomplianceReasonNoProductionTraffic []NoncomplianceReasonNoProductionTrafficInitParameters `json:"noncomplianceReasonNoProductionTraffic,omitempty" tf:"noncompliance_reason_no_production_traffic,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NONE`
	NoncomplianceReasonNone []NoncomplianceReasonNoneInitParameters `json:"noncomplianceReasonNone,omitempty" tf:"noncompliance_reason_none,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
	NoncomplianceReasonOther []NoncomplianceReasonOtherInitParameters `json:"noncomplianceReasonOther,omitempty" tf:"noncompliance_reason_other,omitempty"`
}

type ComplianceRecordObservation struct {

	// Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
	NoncomplianceReasonEmergency []NoncomplianceReasonEmergencyObservation `json:"noncomplianceReasonEmergency,omitempty" tf:"noncompliance_reason_emergency,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
	NoncomplianceReasonNoProductionTraffic []NoncomplianceReasonNoProductionTrafficObservation `json:"noncomplianceReasonNoProductionTraffic,omitempty" tf:"noncompliance_reason_no_production_traffic,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NONE`
	NoncomplianceReasonNone []NoncomplianceReasonNoneObservation `json:"noncomplianceReasonNone,omitempty" tf:"noncompliance_reason_none,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
	NoncomplianceReasonOther []NoncomplianceReasonOtherObservation `json:"noncomplianceReasonOther,omitempty" tf:"noncompliance_reason_other,omitempty"`
}

type ComplianceRecordParameters struct {

	// Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
	// +kubebuilder:validation:Optional
	NoncomplianceReasonEmergency []NoncomplianceReasonEmergencyParameters `json:"noncomplianceReasonEmergency,omitempty" tf:"noncompliance_reason_emergency,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
	// +kubebuilder:validation:Optional
	NoncomplianceReasonNoProductionTraffic []NoncomplianceReasonNoProductionTrafficParameters `json:"noncomplianceReasonNoProductionTraffic,omitempty" tf:"noncompliance_reason_no_production_traffic,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NONE`
	// +kubebuilder:validation:Optional
	NoncomplianceReasonNone []NoncomplianceReasonNoneParameters `json:"noncomplianceReasonNone,omitempty" tf:"noncompliance_reason_none,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
	// +kubebuilder:validation:Optional
	NoncomplianceReasonOther []NoncomplianceReasonOtherParameters `json:"noncomplianceReasonOther,omitempty" tf:"noncompliance_reason_other,omitempty"`
}

type NoncomplianceReasonEmergencyInitParameters struct {

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type NoncomplianceReasonEmergencyObservation struct {

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type NoncomplianceReasonEmergencyParameters struct {

	// Identifies the ticket that describes the need for the activation
	// +kubebuilder:validation:Optional
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type NoncomplianceReasonNoProductionTrafficInitParameters struct {

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type NoncomplianceReasonNoProductionTrafficObservation struct {

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type NoncomplianceReasonNoProductionTrafficParameters struct {

	// Identifies the ticket that describes the need for the activation
	// +kubebuilder:validation:Optional
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type NoncomplianceReasonNoneInitParameters struct {

	// Identifies the customer
	CustomerEmail *string `json:"customerEmail,omitempty" tf:"customer_email,omitempty"`

	// Identifies person who has independently approved the activation request
	PeerReviewedBy *string `json:"peerReviewedBy,omitempty" tf:"peer_reviewed_by,omitempty"`

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`

	// Whether the metadata to activate has been fully tested
	UnitTested *bool `json:"unitTested,omitempty" tf:"unit_tested,omitempty"`
}

type NoncomplianceReasonNoneObservation struct {

	// Identifies the customer
	CustomerEmail *string `json:"customerEmail,omitempty" tf:"customer_email,omitempty"`

	// Identifies person who has independently approved the activation request
	PeerReviewedBy *string `json:"peerReviewedBy,omitempty" tf:"peer_reviewed_by,omitempty"`

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`

	// Whether the metadata to activate has been fully tested
	UnitTested *bool `json:"unitTested,omitempty" tf:"unit_tested,omitempty"`
}

type NoncomplianceReasonNoneParameters struct {

	// Identifies the customer
	// +kubebuilder:validation:Optional
	CustomerEmail *string `json:"customerEmail,omitempty" tf:"customer_email,omitempty"`

	// Identifies person who has independently approved the activation request
	// +kubebuilder:validation:Optional
	PeerReviewedBy *string `json:"peerReviewedBy,omitempty" tf:"peer_reviewed_by,omitempty"`

	// Identifies the ticket that describes the need for the activation
	// +kubebuilder:validation:Optional
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`

	// Whether the metadata to activate has been fully tested
	// +kubebuilder:validation:Optional
	UnitTested *bool `json:"unitTested,omitempty" tf:"unit_tested,omitempty"`
}

type NoncomplianceReasonOtherInitParameters struct {

	// Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
	OtherNoncomplianceReason *string `json:"otherNoncomplianceReason,omitempty" tf:"other_noncompliance_reason,omitempty"`

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type NoncomplianceReasonOtherObservation struct {

	// Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
	OtherNoncomplianceReason *string `json:"otherNoncomplianceReason,omitempty" tf:"other_noncompliance_reason,omitempty"`

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type NoncomplianceReasonOtherParameters struct {

	// Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
	// +kubebuilder:validation:Optional
	OtherNoncomplianceReason *string `json:"otherNoncomplianceReason,omitempty" tf:"other_noncompliance_reason,omitempty"`

	// Identifies the ticket that describes the need for the activation
	// +kubebuilder:validation:Optional
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

// ActivationSpec defines the desired state of Activation
type ActivationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActivationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActivationInitParameters `json:"initProvider,omitempty"`
}

// ActivationStatus defines the observed state of Activation.
type ActivationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActivationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Activation is the Schema for the Activations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type Activation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contact) || (has(self.initProvider) && has(self.initProvider.contact))",message="spec.forProvider.contact is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.propertyId) || (has(self.initProvider) && has(self.initProvider.propertyId))",message="spec.forProvider.propertyId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   ActivationSpec   `json:"spec"`
	Status ActivationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActivationList contains a list of Activations
type ActivationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Activation `json:"items"`
}

// Repository type metadata.
var (
	Activation_Kind             = "Activation"
	Activation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Activation_Kind}.String()
	Activation_KindAPIVersion   = Activation_Kind + "." + CRDGroupVersion.String()
	Activation_GroupVersionKind = CRDGroupVersion.WithKind(Activation_Kind)
)

func init() {
	SchemeBuilder.Register(&Activation{}, &ActivationList{})
}
