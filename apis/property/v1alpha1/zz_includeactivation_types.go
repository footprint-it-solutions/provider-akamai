// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComplianceRecordNoncomplianceReasonEmergencyInitParameters struct {

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type ComplianceRecordNoncomplianceReasonEmergencyObservation struct {

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type ComplianceRecordNoncomplianceReasonEmergencyParameters struct {

	// Identifies the ticket that describes the need for the activation
	// +kubebuilder:validation:Optional
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type ComplianceRecordNoncomplianceReasonNoProductionTrafficInitParameters struct {

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type ComplianceRecordNoncomplianceReasonNoProductionTrafficObservation struct {

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type ComplianceRecordNoncomplianceReasonNoProductionTrafficParameters struct {

	// Identifies the ticket that describes the need for the activation
	// +kubebuilder:validation:Optional
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type ComplianceRecordNoncomplianceReasonNoneInitParameters struct {

	// Identifies the customer
	CustomerEmail *string `json:"customerEmail,omitempty" tf:"customer_email,omitempty"`

	// Identifies person who has independently approved the activation request
	PeerReviewedBy *string `json:"peerReviewedBy,omitempty" tf:"peer_reviewed_by,omitempty"`

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`

	// Whether the metadata to activate has been fully tested
	UnitTested *bool `json:"unitTested,omitempty" tf:"unit_tested,omitempty"`
}

type ComplianceRecordNoncomplianceReasonNoneObservation struct {

	// Identifies the customer
	CustomerEmail *string `json:"customerEmail,omitempty" tf:"customer_email,omitempty"`

	// Identifies person who has independently approved the activation request
	PeerReviewedBy *string `json:"peerReviewedBy,omitempty" tf:"peer_reviewed_by,omitempty"`

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`

	// Whether the metadata to activate has been fully tested
	UnitTested *bool `json:"unitTested,omitempty" tf:"unit_tested,omitempty"`
}

type ComplianceRecordNoncomplianceReasonNoneParameters struct {

	// Identifies the customer
	// +kubebuilder:validation:Optional
	CustomerEmail *string `json:"customerEmail,omitempty" tf:"customer_email,omitempty"`

	// Identifies person who has independently approved the activation request
	// +kubebuilder:validation:Optional
	PeerReviewedBy *string `json:"peerReviewedBy,omitempty" tf:"peer_reviewed_by,omitempty"`

	// Identifies the ticket that describes the need for the activation
	// +kubebuilder:validation:Optional
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`

	// Whether the metadata to activate has been fully tested
	// +kubebuilder:validation:Optional
	UnitTested *bool `json:"unitTested,omitempty" tf:"unit_tested,omitempty"`
}

type ComplianceRecordNoncomplianceReasonOtherInitParameters struct {

	// Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
	OtherNoncomplianceReason *string `json:"otherNoncomplianceReason,omitempty" tf:"other_noncompliance_reason,omitempty"`

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type ComplianceRecordNoncomplianceReasonOtherObservation struct {

	// Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
	OtherNoncomplianceReason *string `json:"otherNoncomplianceReason,omitempty" tf:"other_noncompliance_reason,omitempty"`

	// Identifies the ticket that describes the need for the activation
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type ComplianceRecordNoncomplianceReasonOtherParameters struct {

	// Describes the reason why the activation must occur immediately, out of compliance with the standard procedure
	// +kubebuilder:validation:Optional
	OtherNoncomplianceReason *string `json:"otherNoncomplianceReason,omitempty" tf:"other_noncompliance_reason,omitempty"`

	// Identifies the ticket that describes the need for the activation
	// +kubebuilder:validation:Optional
	TicketID *string `json:"ticketId,omitempty" tf:"ticket_id,omitempty"`
}

type IncludeActivationComplianceRecordInitParameters struct {

	// Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
	NoncomplianceReasonEmergency []ComplianceRecordNoncomplianceReasonEmergencyInitParameters `json:"noncomplianceReasonEmergency,omitempty" tf:"noncompliance_reason_emergency,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
	NoncomplianceReasonNoProductionTraffic []ComplianceRecordNoncomplianceReasonNoProductionTrafficInitParameters `json:"noncomplianceReasonNoProductionTraffic,omitempty" tf:"noncompliance_reason_no_production_traffic,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NONE`
	NoncomplianceReasonNone []ComplianceRecordNoncomplianceReasonNoneInitParameters `json:"noncomplianceReasonNone,omitempty" tf:"noncompliance_reason_none,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
	NoncomplianceReasonOther []ComplianceRecordNoncomplianceReasonOtherInitParameters `json:"noncomplianceReasonOther,omitempty" tf:"noncompliance_reason_other,omitempty"`
}

type IncludeActivationComplianceRecordObservation struct {

	// Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
	NoncomplianceReasonEmergency []ComplianceRecordNoncomplianceReasonEmergencyObservation `json:"noncomplianceReasonEmergency,omitempty" tf:"noncompliance_reason_emergency,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
	NoncomplianceReasonNoProductionTraffic []ComplianceRecordNoncomplianceReasonNoProductionTrafficObservation `json:"noncomplianceReasonNoProductionTraffic,omitempty" tf:"noncompliance_reason_no_production_traffic,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NONE`
	NoncomplianceReasonNone []ComplianceRecordNoncomplianceReasonNoneObservation `json:"noncomplianceReasonNone,omitempty" tf:"noncompliance_reason_none,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
	NoncomplianceReasonOther []ComplianceRecordNoncomplianceReasonOtherObservation `json:"noncomplianceReasonOther,omitempty" tf:"noncompliance_reason_other,omitempty"`
}

type IncludeActivationComplianceRecordParameters struct {

	// Provides an audit record when activating on a production network with noncompliance reason as `EMERGENCY`
	// +kubebuilder:validation:Optional
	NoncomplianceReasonEmergency []ComplianceRecordNoncomplianceReasonEmergencyParameters `json:"noncomplianceReasonEmergency,omitempty" tf:"noncompliance_reason_emergency,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NO_PRODUCTION_TRAFFIC`
	// +kubebuilder:validation:Optional
	NoncomplianceReasonNoProductionTraffic []ComplianceRecordNoncomplianceReasonNoProductionTrafficParameters `json:"noncomplianceReasonNoProductionTraffic,omitempty" tf:"noncompliance_reason_no_production_traffic,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `NONE`
	// +kubebuilder:validation:Optional
	NoncomplianceReasonNone []ComplianceRecordNoncomplianceReasonNoneParameters `json:"noncomplianceReasonNone,omitempty" tf:"noncompliance_reason_none,omitempty"`

	// Provides an audit record when activating on a production network with noncompliance reason as `OTHER`
	// +kubebuilder:validation:Optional
	NoncomplianceReasonOther []ComplianceRecordNoncomplianceReasonOtherParameters `json:"noncomplianceReasonOther,omitempty" tf:"noncompliance_reason_other,omitempty"`
}

type IncludeActivationInitParameters struct {

	// Automatically acknowledge all rule warnings for activation and continue
	AutoAcknowledgeRuleWarnings *bool `json:"autoAcknowledgeRuleWarnings,omitempty" tf:"auto_acknowledge_rule_warnings,omitempty"`

	// Provides an audit record when activating on a production network
	ComplianceRecord []IncludeActivationComplianceRecordInitParameters `json:"complianceRecord,omitempty" tf:"compliance_record,omitempty"`

	// The contract under which the include is activated
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// The group under which the include is activated
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The unique identifier of the include
	IncludeID *string `json:"includeId,omitempty" tf:"include_id,omitempty"`

	// The network for which the activation will be performed
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// The note to assign to a log message of the activation request
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// The list of email addresses to notify about an activation status
	// +listType=set
	NotifyEmails []*string `json:"notifyEmails,omitempty" tf:"notify_emails,omitempty"`

	// The unique identifier of the include
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type IncludeActivationObservation struct {

	// Automatically acknowledge all rule warnings for activation and continue
	AutoAcknowledgeRuleWarnings *bool `json:"autoAcknowledgeRuleWarnings,omitempty" tf:"auto_acknowledge_rule_warnings,omitempty"`

	// Provides an audit record when activating on a production network
	ComplianceRecord []IncludeActivationComplianceRecordObservation `json:"complianceRecord,omitempty" tf:"compliance_record,omitempty"`

	// The contract under which the include is activated
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// The group under which the include is activated
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique identifier of the include
	IncludeID *string `json:"includeId,omitempty" tf:"include_id,omitempty"`

	// The network for which the activation will be performed
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// The note to assign to a log message of the activation request
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// The list of email addresses to notify about an activation status
	// +listType=set
	NotifyEmails []*string `json:"notifyEmails,omitempty" tf:"notify_emails,omitempty"`

	// The validation information in JSON format
	Validations *string `json:"validations,omitempty" tf:"validations,omitempty"`

	// The unique identifier of the include
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type IncludeActivationParameters struct {

	// Automatically acknowledge all rule warnings for activation and continue
	// +kubebuilder:validation:Optional
	AutoAcknowledgeRuleWarnings *bool `json:"autoAcknowledgeRuleWarnings,omitempty" tf:"auto_acknowledge_rule_warnings,omitempty"`

	// Provides an audit record when activating on a production network
	// +kubebuilder:validation:Optional
	ComplianceRecord []IncludeActivationComplianceRecordParameters `json:"complianceRecord,omitempty" tf:"compliance_record,omitempty"`

	// The contract under which the include is activated
	// +kubebuilder:validation:Optional
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// The group under which the include is activated
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The unique identifier of the include
	// +kubebuilder:validation:Optional
	IncludeID *string `json:"includeId,omitempty" tf:"include_id,omitempty"`

	// The network for which the activation will be performed
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// The note to assign to a log message of the activation request
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// The list of email addresses to notify about an activation status
	// +kubebuilder:validation:Optional
	// +listType=set
	NotifyEmails []*string `json:"notifyEmails,omitempty" tf:"notify_emails,omitempty"`

	// The unique identifier of the include
	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

// IncludeActivationSpec defines the desired state of IncludeActivation
type IncludeActivationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IncludeActivationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IncludeActivationInitParameters `json:"initProvider,omitempty"`
}

// IncludeActivationStatus defines the observed state of IncludeActivation.
type IncludeActivationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IncludeActivationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IncludeActivation is the Schema for the IncludeActivations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type IncludeActivation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contractId) || (has(self.initProvider) && has(self.initProvider.contractId))",message="spec.forProvider.contractId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.includeId) || (has(self.initProvider) && has(self.initProvider.includeId))",message="spec.forProvider.includeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notifyEmails) || (has(self.initProvider) && has(self.initProvider.notifyEmails))",message="spec.forProvider.notifyEmails is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   IncludeActivationSpec   `json:"spec"`
	Status IncludeActivationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IncludeActivationList contains a list of IncludeActivations
type IncludeActivationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IncludeActivation `json:"items"`
}

// Repository type metadata.
var (
	IncludeActivation_Kind             = "IncludeActivation"
	IncludeActivation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IncludeActivation_Kind}.String()
	IncludeActivation_KindAPIVersion   = IncludeActivation_Kind + "." + CRDGroupVersion.String()
	IncludeActivation_GroupVersionKind = CRDGroupVersion.WithKind(IncludeActivation_Kind)
)

func init() {
	SchemeBuilder.Register(&IncludeActivation{}, &IncludeActivationList{})
}
