// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CapacityInitParameters struct {

	// Unit of capacity. Can be either 'GB' or 'TB'.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Value of capacity.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type CapacityObservation struct {

	// Unit of capacity. Can be either 'GB' or 'TB'.
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`

	// Value of capacity.
	Value *float64 `json:"value,omitempty" tf:"value,omitempty"`
}

type CapacityParameters struct {

	// Unit of capacity. Can be either 'GB' or 'TB'.
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`

	// Value of capacity.
	// +kubebuilder:validation:Optional
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type ConfigurationInitParameters struct {

	// Capacity Alerts enablement information for the configuration. The Alert Threshold should be between 50 and 100.
	CapacityAlertsThreshold *float64 `json:"capacityAlertsThreshold,omitempty" tf:"capacity_alerts_threshold,omitempty"`

	// Additional information you provide to differentiate or track changes of the configuration.
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Name of the configuration.
	ConfigName *string `json:"configName,omitempty" tf:"config_name,omitempty"`

	// Contract ID having Cloud Wrapper entitlement.
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// List of locations to use with the configuration.
	Location []LocationInitParameters `json:"location,omitempty" tf:"location,omitempty"`

	// Email addresses to use for notifications.
	// +listType=set
	NotificationEmails []*string `json:"notificationEmails,omitempty" tf:"notification_emails,omitempty"`

	// List of properties belonging to eligible products.
	// +listType=set
	PropertyIds []*string `json:"propertyIds,omitempty" tf:"property_ids,omitempty"`

	// Retain idle objects beyond their max idle lifetime.
	RetainIdleObjects *bool `json:"retainIdleObjects,omitempty" tf:"retain_idle_objects,omitempty"`
}

type ConfigurationObservation struct {

	// Capacity Alerts enablement information for the configuration. The Alert Threshold should be between 50 and 100.
	CapacityAlertsThreshold *float64 `json:"capacityAlertsThreshold,omitempty" tf:"capacity_alerts_threshold,omitempty"`

	// Additional information you provide to differentiate or track changes of the configuration.
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Name of the configuration.
	ConfigName *string `json:"configName,omitempty" tf:"config_name,omitempty"`

	// Contract ID having Cloud Wrapper entitlement.
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of locations to use with the configuration.
	Location []LocationObservation `json:"location,omitempty" tf:"location,omitempty"`

	// Email addresses to use for notifications.
	// +listType=set
	NotificationEmails []*string `json:"notificationEmails,omitempty" tf:"notification_emails,omitempty"`

	// List of properties belonging to eligible products.
	// +listType=set
	PropertyIds []*string `json:"propertyIds,omitempty" tf:"property_ids,omitempty"`

	// Retain idle objects beyond their max idle lifetime.
	RetainIdleObjects *bool `json:"retainIdleObjects,omitempty" tf:"retain_idle_objects,omitempty"`

	// Unique hash value of the configuration.
	Revision *string `json:"revision,omitempty" tf:"revision,omitempty"`
}

type ConfigurationParameters struct {

	// Capacity Alerts enablement information for the configuration. The Alert Threshold should be between 50 and 100.
	// +kubebuilder:validation:Optional
	CapacityAlertsThreshold *float64 `json:"capacityAlertsThreshold,omitempty" tf:"capacity_alerts_threshold,omitempty"`

	// Additional information you provide to differentiate or track changes of the configuration.
	// +kubebuilder:validation:Optional
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Name of the configuration.
	// +kubebuilder:validation:Optional
	ConfigName *string `json:"configName,omitempty" tf:"config_name,omitempty"`

	// Contract ID having Cloud Wrapper entitlement.
	// +kubebuilder:validation:Optional
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// List of locations to use with the configuration.
	// +kubebuilder:validation:Optional
	Location []LocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// Email addresses to use for notifications.
	// +kubebuilder:validation:Optional
	// +listType=set
	NotificationEmails []*string `json:"notificationEmails,omitempty" tf:"notification_emails,omitempty"`

	// List of properties belonging to eligible products.
	// +kubebuilder:validation:Optional
	// +listType=set
	PropertyIds []*string `json:"propertyIds,omitempty" tf:"property_ids,omitempty"`

	// Retain idle objects beyond their max idle lifetime.
	// +kubebuilder:validation:Optional
	RetainIdleObjects *bool `json:"retainIdleObjects,omitempty" tf:"retain_idle_objects,omitempty"`
}

type LocationInitParameters struct {

	// The capacity assigned to this configuration's location
	Capacity []CapacityInitParameters `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Additional comments provided by the user.
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Unique identifier for the location and traffic type combination
	TrafficTypeID *float64 `json:"trafficTypeId,omitempty" tf:"traffic_type_id,omitempty"`
}

type LocationObservation struct {

	// The capacity assigned to this configuration's location
	Capacity []CapacityObservation `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// Additional comments provided by the user.
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Unique identifier for the location and traffic type combination
	TrafficTypeID *float64 `json:"trafficTypeId,omitempty" tf:"traffic_type_id,omitempty"`
}

type LocationParameters struct {

	// The capacity assigned to this configuration's location
	// +kubebuilder:validation:Optional
	Capacity []CapacityParameters `json:"capacity" tf:"capacity,omitempty"`

	// Additional comments provided by the user.
	// +kubebuilder:validation:Optional
	Comments *string `json:"comments" tf:"comments,omitempty"`

	// Unique identifier for the location and traffic type combination
	// +kubebuilder:validation:Optional
	TrafficTypeID *float64 `json:"trafficTypeId" tf:"traffic_type_id,omitempty"`
}

// ConfigurationSpec defines the desired state of Configuration
type ConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigurationInitParameters `json:"initProvider,omitempty"`
}

// ConfigurationStatus defines the observed state of Configuration.
type ConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Configuration is the Schema for the Configurations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type Configuration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.comments) || (has(self.initProvider) && has(self.initProvider.comments))",message="spec.forProvider.comments is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configName) || (has(self.initProvider) && has(self.initProvider.configName))",message="spec.forProvider.configName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contractId) || (has(self.initProvider) && has(self.initProvider.contractId))",message="spec.forProvider.contractId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.propertyIds) || (has(self.initProvider) && has(self.initProvider.propertyIds))",message="spec.forProvider.propertyIds is a required parameter"
	Spec   ConfigurationSpec   `json:"spec"`
	Status ConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationList contains a list of Configurations
type ConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Configuration `json:"items"`
}

// Repository type metadata.
var (
	Configuration_Kind             = "Configuration"
	Configuration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Configuration_Kind}.String()
	Configuration_KindAPIVersion   = Configuration_Kind + "." + CRDGroupVersion.String()
	Configuration_GroupVersionKind = CRDGroupVersion.WithKind(Configuration_Kind)
)

func init() {
	SchemeBuilder.Register(&Configuration{}, &ConfigurationList{})
}
