// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyImageInitParameters struct {

	// With this flag set to false, the user can perform modifications on staging without affecting the version already saved to production. With this flag set to true, the policy will be saved on the production network. It is possible to change it back to false only when there are any changes to the policy qualifying it for the new version.
	ActivateOnProduction *bool `json:"activateOnProduction,omitempty" tf:"activate_on_production,omitempty"`

	// Unique identifier for the Akamai Contract containing the Policy Set(s)
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// A JSON encoded policy
	JSON *string `json:"json,omitempty" tf:"json,omitempty"`

	// Unique identifier for a Policy. It is not possible to modify the id of the policy.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Unique identifier for the Image & Video Manager Policy Set.
	PolicysetID *string `json:"policysetId,omitempty" tf:"policyset_id,omitempty"`
}

type PolicyImageObservation struct {

	// With this flag set to false, the user can perform modifications on staging without affecting the version already saved to production. With this flag set to true, the policy will be saved on the production network. It is possible to change it back to false only when there are any changes to the policy qualifying it for the new version.
	ActivateOnProduction *bool `json:"activateOnProduction,omitempty" tf:"activate_on_production,omitempty"`

	// Unique identifier for the Akamai Contract containing the Policy Set(s)
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A JSON encoded policy
	JSON *string `json:"json,omitempty" tf:"json,omitempty"`

	// Unique identifier for a Policy. It is not possible to modify the id of the policy.
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Unique identifier for the Image & Video Manager Policy Set.
	PolicysetID *string `json:"policysetId,omitempty" tf:"policyset_id,omitempty"`

	// The version number of this policy version
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type PolicyImageParameters struct {

	// With this flag set to false, the user can perform modifications on staging without affecting the version already saved to production. With this flag set to true, the policy will be saved on the production network. It is possible to change it back to false only when there are any changes to the policy qualifying it for the new version.
	// +kubebuilder:validation:Optional
	ActivateOnProduction *bool `json:"activateOnProduction,omitempty" tf:"activate_on_production,omitempty"`

	// Unique identifier for the Akamai Contract containing the Policy Set(s)
	// +kubebuilder:validation:Optional
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// A JSON encoded policy
	// +kubebuilder:validation:Optional
	JSON *string `json:"json,omitempty" tf:"json,omitempty"`

	// Unique identifier for a Policy. It is not possible to modify the id of the policy.
	// +kubebuilder:validation:Optional
	PolicyID *string `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Unique identifier for the Image & Video Manager Policy Set.
	// +kubebuilder:validation:Optional
	PolicysetID *string `json:"policysetId,omitempty" tf:"policyset_id,omitempty"`
}

// PolicyImageSpec defines the desired state of PolicyImage
type PolicyImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyImageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyImageInitParameters `json:"initProvider,omitempty"`
}

// PolicyImageStatus defines the observed state of PolicyImage.
type PolicyImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyImage is the Schema for the PolicyImages API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type PolicyImage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contractId) || (has(self.initProvider) && has(self.initProvider.contractId))",message="spec.forProvider.contractId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.json) || (has(self.initProvider) && has(self.initProvider.json))",message="spec.forProvider.json is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyId) || (has(self.initProvider) && has(self.initProvider.policyId))",message="spec.forProvider.policyId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policysetId) || (has(self.initProvider) && has(self.initProvider.policysetId))",message="spec.forProvider.policysetId is a required parameter"
	Spec   PolicyImageSpec   `json:"spec"`
	Status PolicyImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyImageList contains a list of PolicyImages
type PolicyImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyImage `json:"items"`
}

// Repository type metadata.
var (
	PolicyImage_Kind             = "PolicyImage"
	PolicyImage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyImage_Kind}.String()
	PolicyImage_KindAPIVersion   = PolicyImage_Kind + "." + CRDGroupVersion.String()
	PolicyImage_GroupVersionKind = CRDGroupVersion.WithKind(PolicyImage_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyImage{}, &PolicyImageList{})
}
