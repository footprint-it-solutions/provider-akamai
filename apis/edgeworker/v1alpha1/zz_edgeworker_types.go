// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EdgeWorkerInitParameters struct {

	// Defines the group association for the EdgeWorker
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The path to the EdgeWorkers tgz code bundle
	LocalBundle *string `json:"localBundle,omitempty" tf:"local_bundle,omitempty"`

	// The EdgeWorker name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique identifier of a resource tier
	ResourceTierID *float64 `json:"resourceTierId,omitempty" tf:"resource_tier_id,omitempty"`
}

type EdgeWorkerObservation struct {

	// The unique identifier of the EdgeWorker
	EdgeworkerID *float64 `json:"edgeworkerId,omitempty" tf:"edgeworker_id,omitempty"`

	// Defines the group association for the EdgeWorker
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The path to the EdgeWorkers tgz code bundle
	LocalBundle *string `json:"localBundle,omitempty" tf:"local_bundle,omitempty"`

	// The local bundle hash for the EdgeWorker
	LocalBundleHash *string `json:"localBundleHash,omitempty" tf:"local_bundle_hash,omitempty"`

	// The EdgeWorker name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique identifier of a resource tier
	ResourceTierID *float64 `json:"resourceTierId,omitempty" tf:"resource_tier_id,omitempty"`

	// The bundle version
	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	// The list of warnings returned by EdgeWorker validation
	Warnings []*string `json:"warnings,omitempty" tf:"warnings,omitempty"`
}

type EdgeWorkerParameters struct {

	// Defines the group association for the EdgeWorker
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The path to the EdgeWorkers tgz code bundle
	// +kubebuilder:validation:Optional
	LocalBundle *string `json:"localBundle,omitempty" tf:"local_bundle,omitempty"`

	// The EdgeWorker name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The unique identifier of a resource tier
	// +kubebuilder:validation:Optional
	ResourceTierID *float64 `json:"resourceTierId,omitempty" tf:"resource_tier_id,omitempty"`
}

// EdgeWorkerSpec defines the desired state of EdgeWorker
type EdgeWorkerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgeWorkerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EdgeWorkerInitParameters `json:"initProvider,omitempty"`
}

// EdgeWorkerStatus defines the observed state of EdgeWorker.
type EdgeWorkerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgeWorkerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// EdgeWorker is the Schema for the EdgeWorkers API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type EdgeWorker struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.resourceTierId) || (has(self.initProvider) && has(self.initProvider.resourceTierId))",message="spec.forProvider.resourceTierId is a required parameter"
	Spec   EdgeWorkerSpec   `json:"spec"`
	Status EdgeWorkerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeWorkerList contains a list of EdgeWorkers
type EdgeWorkerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EdgeWorker `json:"items"`
}

// Repository type metadata.
var (
	EdgeWorker_Kind             = "EdgeWorker"
	EdgeWorker_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EdgeWorker_Kind}.String()
	EdgeWorker_KindAPIVersion   = EdgeWorker_Kind + "." + CRDGroupVersion.String()
	EdgeWorker_GroupVersionKind = CRDGroupVersion.WithKind(EdgeWorker_Kind)
)

func init() {
	SchemeBuilder.Register(&EdgeWorker{}, &EdgeWorkerList{})
}
