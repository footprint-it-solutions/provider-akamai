//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Activation) DeepCopyInto(out *Activation) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Activation.
func (in *Activation) DeepCopy() *Activation {
	if in == nil {
		return nil
	}
	out := new(Activation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Activation) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActivationInitParameters) DeepCopyInto(out *ActivationInitParameters) {
	*out = *in
	if in.EdgeworkerID != nil {
		in, out := &in.EdgeworkerID, &out.EdgeworkerID
		*out = new(float64)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.Note != nil {
		in, out := &in.Note, &out.Note
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActivationInitParameters.
func (in *ActivationInitParameters) DeepCopy() *ActivationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ActivationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActivationList) DeepCopyInto(out *ActivationList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Activation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActivationList.
func (in *ActivationList) DeepCopy() *ActivationList {
	if in == nil {
		return nil
	}
	out := new(ActivationList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ActivationList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActivationObservation) DeepCopyInto(out *ActivationObservation) {
	*out = *in
	if in.ActivationID != nil {
		in, out := &in.ActivationID, &out.ActivationID
		*out = new(float64)
		**out = **in
	}
	if in.EdgeworkerID != nil {
		in, out := &in.EdgeworkerID, &out.EdgeworkerID
		*out = new(float64)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.Note != nil {
		in, out := &in.Note, &out.Note
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActivationObservation.
func (in *ActivationObservation) DeepCopy() *ActivationObservation {
	if in == nil {
		return nil
	}
	out := new(ActivationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActivationParameters) DeepCopyInto(out *ActivationParameters) {
	*out = *in
	if in.EdgeworkerID != nil {
		in, out := &in.EdgeworkerID, &out.EdgeworkerID
		*out = new(float64)
		**out = **in
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(string)
		**out = **in
	}
	if in.Note != nil {
		in, out := &in.Note, &out.Note
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActivationParameters.
func (in *ActivationParameters) DeepCopy() *ActivationParameters {
	if in == nil {
		return nil
	}
	out := new(ActivationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActivationSpec) DeepCopyInto(out *ActivationSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActivationSpec.
func (in *ActivationSpec) DeepCopy() *ActivationSpec {
	if in == nil {
		return nil
	}
	out := new(ActivationSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ActivationStatus) DeepCopyInto(out *ActivationStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ActivationStatus.
func (in *ActivationStatus) DeepCopy() *ActivationStatus {
	if in == nil {
		return nil
	}
	out := new(ActivationStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeWorker) DeepCopyInto(out *EdgeWorker) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeWorker.
func (in *EdgeWorker) DeepCopy() *EdgeWorker {
	if in == nil {
		return nil
	}
	out := new(EdgeWorker)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EdgeWorker) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeWorkerInitParameters) DeepCopyInto(out *EdgeWorkerInitParameters) {
	*out = *in
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.LocalBundle != nil {
		in, out := &in.LocalBundle, &out.LocalBundle
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceTierID != nil {
		in, out := &in.ResourceTierID, &out.ResourceTierID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeWorkerInitParameters.
func (in *EdgeWorkerInitParameters) DeepCopy() *EdgeWorkerInitParameters {
	if in == nil {
		return nil
	}
	out := new(EdgeWorkerInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeWorkerList) DeepCopyInto(out *EdgeWorkerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]EdgeWorker, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeWorkerList.
func (in *EdgeWorkerList) DeepCopy() *EdgeWorkerList {
	if in == nil {
		return nil
	}
	out := new(EdgeWorkerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *EdgeWorkerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeWorkerObservation) DeepCopyInto(out *EdgeWorkerObservation) {
	*out = *in
	if in.EdgeworkerID != nil {
		in, out := &in.EdgeworkerID, &out.EdgeworkerID
		*out = new(float64)
		**out = **in
	}
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LocalBundle != nil {
		in, out := &in.LocalBundle, &out.LocalBundle
		*out = new(string)
		**out = **in
	}
	if in.LocalBundleHash != nil {
		in, out := &in.LocalBundleHash, &out.LocalBundleHash
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceTierID != nil {
		in, out := &in.ResourceTierID, &out.ResourceTierID
		*out = new(float64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Warnings != nil {
		in, out := &in.Warnings, &out.Warnings
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeWorkerObservation.
func (in *EdgeWorkerObservation) DeepCopy() *EdgeWorkerObservation {
	if in == nil {
		return nil
	}
	out := new(EdgeWorkerObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeWorkerParameters) DeepCopyInto(out *EdgeWorkerParameters) {
	*out = *in
	if in.GroupID != nil {
		in, out := &in.GroupID, &out.GroupID
		*out = new(string)
		**out = **in
	}
	if in.LocalBundle != nil {
		in, out := &in.LocalBundle, &out.LocalBundle
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ResourceTierID != nil {
		in, out := &in.ResourceTierID, &out.ResourceTierID
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeWorkerParameters.
func (in *EdgeWorkerParameters) DeepCopy() *EdgeWorkerParameters {
	if in == nil {
		return nil
	}
	out := new(EdgeWorkerParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeWorkerSpec) DeepCopyInto(out *EdgeWorkerSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeWorkerSpec.
func (in *EdgeWorkerSpec) DeepCopy() *EdgeWorkerSpec {
	if in == nil {
		return nil
	}
	out := new(EdgeWorkerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EdgeWorkerStatus) DeepCopyInto(out *EdgeWorkerStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EdgeWorkerStatus.
func (in *EdgeWorkerStatus) DeepCopy() *EdgeWorkerStatus {
	if in == nil {
		return nil
	}
	out := new(EdgeWorkerStatus)
	in.DeepCopyInto(out)
	return out
}
