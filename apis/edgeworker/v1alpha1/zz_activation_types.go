// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActivationInitParameters struct {

	// Id of the EdgeWorker to activate
	EdgeworkerID *float64 `json:"edgeworkerId,omitempty" tf:"edgeworker_id,omitempty"`

	// The network on which the version will be activated
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Assigns a log message to the activation request
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// The version of EdgeWorker to activate
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ActivationObservation struct {

	// A unique identifier of the activation
	ActivationID *float64 `json:"activationId,omitempty" tf:"activation_id,omitempty"`

	// Id of the EdgeWorker to activate
	EdgeworkerID *float64 `json:"edgeworkerId,omitempty" tf:"edgeworker_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The network on which the version will be activated
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Assigns a log message to the activation request
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// The version of EdgeWorker to activate
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ActivationParameters struct {

	// Id of the EdgeWorker to activate
	// +kubebuilder:validation:Optional
	EdgeworkerID *float64 `json:"edgeworkerId,omitempty" tf:"edgeworker_id,omitempty"`

	// The network on which the version will be activated
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Assigns a log message to the activation request
	// +kubebuilder:validation:Optional
	Note *string `json:"note,omitempty" tf:"note,omitempty"`

	// The version of EdgeWorker to activate
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// ActivationSpec defines the desired state of Activation
type ActivationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ActivationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ActivationInitParameters `json:"initProvider,omitempty"`
}

// ActivationStatus defines the observed state of Activation.
type ActivationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ActivationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Activation is the Schema for the Activations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type Activation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.edgeworkerId) || (has(self.initProvider) && has(self.initProvider.edgeworkerId))",message="spec.forProvider.edgeworkerId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   ActivationSpec   `json:"spec"`
	Status ActivationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ActivationList contains a list of Activations
type ActivationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Activation `json:"items"`
}

// Repository type metadata.
var (
	Activation_Kind             = "Activation"
	Activation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Activation_Kind}.String()
	Activation_KindAPIVersion   = Activation_Kind + "." + CRDGroupVersion.String()
	Activation_GroupVersionKind = CRDGroupVersion.WithKind(Activation_Kind)
)

func init() {
	SchemeBuilder.Register(&Activation{}, &ActivationList{})
}
