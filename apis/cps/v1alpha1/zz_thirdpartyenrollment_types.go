// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkConfigurationClientMutualAuthenticationInitParameters struct {

	// Enable OCSP stapling
	OcspEnabled *bool `json:"ocspEnabled,omitempty" tf:"ocsp_enabled,omitempty"`

	// Enable the server to send the certificate authority (CA) list to the client
	SendCAListToClient *bool `json:"sendCaListToClient,omitempty" tf:"send_ca_list_to_client,omitempty"`

	// The identifier of the set of trust chains, created in the Trust Chain Manager
	SetID *string `json:"setId,omitempty" tf:"set_id,omitempty"`
}

type NetworkConfigurationClientMutualAuthenticationObservation struct {

	// Enable OCSP stapling
	OcspEnabled *bool `json:"ocspEnabled,omitempty" tf:"ocsp_enabled,omitempty"`

	// Enable the server to send the certificate authority (CA) list to the client
	SendCAListToClient *bool `json:"sendCaListToClient,omitempty" tf:"send_ca_list_to_client,omitempty"`

	// The identifier of the set of trust chains, created in the Trust Chain Manager
	SetID *string `json:"setId,omitempty" tf:"set_id,omitempty"`
}

type NetworkConfigurationClientMutualAuthenticationParameters struct {

	// Enable OCSP stapling
	// +kubebuilder:validation:Optional
	OcspEnabled *bool `json:"ocspEnabled,omitempty" tf:"ocsp_enabled,omitempty"`

	// Enable the server to send the certificate authority (CA) list to the client
	// +kubebuilder:validation:Optional
	SendCAListToClient *bool `json:"sendCaListToClient,omitempty" tf:"send_ca_list_to_client,omitempty"`

	// The identifier of the set of trust chains, created in the Trust Chain Manager
	// +kubebuilder:validation:Optional
	SetID *string `json:"setId,omitempty" tf:"set_id,omitempty"`
}

type ThirdPartyEnrollmentAdminContactInitParameters struct {

	// The address of the contact
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// First name of the contact
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// Last name of the contact
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Organization where contact is hired
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of the contact
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ThirdPartyEnrollmentAdminContactObservation struct {

	// The address of the contact
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// First name of the contact
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// Last name of the contact
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Organization where contact is hired
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of the contact
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ThirdPartyEnrollmentAdminContactParameters struct {

	// The address of the contact
	// +kubebuilder:validation:Optional
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	// +kubebuilder:validation:Optional
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// First name of the contact
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName" tf:"first_name,omitempty"`

	// Last name of the contact
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName" tf:"last_name,omitempty"`

	// Organization where contact is hired
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone" tf:"phone,omitempty"`

	// Postal code of the contact
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ThirdPartyEnrollmentCsrInitParameters struct {

	// City where organization is located
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// The code of the country where organization is located
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Name of organization used in all legal documents
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Organizational unit of organization
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	// For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
	PreferredTrustChain *string `json:"preferredTrustChain,omitempty" tf:"preferred_trust_chain,omitempty"`

	// State or province of organization location
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ThirdPartyEnrollmentCsrObservation struct {

	// City where organization is located
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// The code of the country where organization is located
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Name of organization used in all legal documents
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Organizational unit of organization
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	// For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
	PreferredTrustChain *string `json:"preferredTrustChain,omitempty" tf:"preferred_trust_chain,omitempty"`

	// State or province of organization location
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ThirdPartyEnrollmentCsrParameters struct {

	// City where organization is located
	// +kubebuilder:validation:Optional
	City *string `json:"city" tf:"city,omitempty"`

	// The code of the country where organization is located
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode" tf:"country_code,omitempty"`

	// Name of organization used in all legal documents
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization" tf:"organization,omitempty"`

	// Organizational unit of organization
	// +kubebuilder:validation:Optional
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	// For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
	// +kubebuilder:validation:Optional
	PreferredTrustChain *string `json:"preferredTrustChain,omitempty" tf:"preferred_trust_chain,omitempty"`

	// State or province of organization location
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ThirdPartyEnrollmentInitParameters struct {

	// Whether acknowledge warnings before certificate verification. Default is false
	AcknowledgePreVerificationWarnings *bool `json:"acknowledgePreVerificationWarnings,omitempty" tf:"acknowledge_pre_verification_warnings,omitempty"`

	// Contact information for the certificate administrator to use at organization
	AdminContact []ThirdPartyEnrollmentAdminContactInitParameters `json:"adminContact,omitempty" tf:"admin_contact,omitempty"`

	// Allow to duplicate common name. Default is false
	AllowDuplicateCommonName *bool `json:"allowDuplicateCommonName,omitempty" tf:"allow_duplicate_common_name,omitempty"`

	// List of warnings to be automatically approved
	// +listType=set
	AutoApproveWarnings []*string `json:"autoApproveWarnings,omitempty" tf:"auto_approve_warnings,omitempty"`

	// Certificate trust chain type. Default is 'default'
	CertificateChainType *string `json:"certificateChainType,omitempty" tf:"certificate_chain_type,omitempty"`

	// When set to false, the certificate will be deployed to both staging and production networks
	ChangeManagement *bool `json:"changeManagement,omitempty" tf:"change_management,omitempty"`

	// Common name used for enrollment
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// Contract ID for which enrollment is retrieved
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Data used for generation of Certificate Signing Request
	Csr []ThirdPartyEnrollmentCsrInitParameters `json:"csr,omitempty" tf:"csr,omitempty"`

	// When true, SANs are excluded from the CSR
	ExcludeSans *bool `json:"excludeSans,omitempty" tf:"exclude_sans,omitempty"`

	// Settings containing network information and TLS metadata used by CPS
	NetworkConfiguration []ThirdPartyEnrollmentNetworkConfigurationInitParameters `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// Organization information
	Organization []ThirdPartyEnrollmentOrganizationInitParameters `json:"organization,omitempty" tf:"organization,omitempty"`

	// List of SANs
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`

	// Type of TLS deployment network
	SecureNetwork *string `json:"secureNetwork,omitempty" tf:"secure_network,omitempty"`

	// The SHA function
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// Whether Server Name Indication is used for enrollment
	SniOnly *bool `json:"sniOnly,omitempty" tf:"sni_only,omitempty"`

	// Contact information for an administrator at Akamai
	TechContact []ThirdPartyEnrollmentTechContactInitParameters `json:"techContact,omitempty" tf:"tech_contact,omitempty"`
}

type ThirdPartyEnrollmentNetworkConfigurationInitParameters struct {

	// The trust chain configuration used for client mutual authentication
	ClientMutualAuthentication []NetworkConfigurationClientMutualAuthenticationInitParameters `json:"clientMutualAuthentication,omitempty" tf:"client_mutual_authentication,omitempty"`

	// Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
	CloneDNSNames *bool `json:"cloneDnsNames,omitempty" tf:"clone_dns_names,omitempty"`

	// TLS versions which are disallowed
	// +listType=set
	DisallowedTLSVersions []*string `json:"disallowedTlsVersions,omitempty" tf:"disallowed_tls_versions,omitempty"`

	// Geography type used for enrollment
	Geography *string `json:"geography,omitempty" tf:"geography,omitempty"`

	// Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	MustHaveCiphers *string `json:"mustHaveCiphers,omitempty" tf:"must_have_ciphers,omitempty"`

	// Enable OCSP stapling. Default is 'on'
	OcspStapling *string `json:"ocspStapling,omitempty" tf:"ocsp_stapling,omitempty"`

	// Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	PreferredCiphers *string `json:"preferredCiphers,omitempty" tf:"preferred_ciphers,omitempty"`

	// Enable QUIC protocol. Default is false
	QuicEnabled *bool `json:"quicEnabled,omitempty" tf:"quic_enabled,omitempty"`
}

type ThirdPartyEnrollmentNetworkConfigurationObservation struct {

	// The trust chain configuration used for client mutual authentication
	ClientMutualAuthentication []NetworkConfigurationClientMutualAuthenticationObservation `json:"clientMutualAuthentication,omitempty" tf:"client_mutual_authentication,omitempty"`

	// Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
	CloneDNSNames *bool `json:"cloneDnsNames,omitempty" tf:"clone_dns_names,omitempty"`

	// TLS versions which are disallowed
	// +listType=set
	DisallowedTLSVersions []*string `json:"disallowedTlsVersions,omitempty" tf:"disallowed_tls_versions,omitempty"`

	// Geography type used for enrollment
	Geography *string `json:"geography,omitempty" tf:"geography,omitempty"`

	// Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	MustHaveCiphers *string `json:"mustHaveCiphers,omitempty" tf:"must_have_ciphers,omitempty"`

	// Enable OCSP stapling. Default is 'on'
	OcspStapling *string `json:"ocspStapling,omitempty" tf:"ocsp_stapling,omitempty"`

	// Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	PreferredCiphers *string `json:"preferredCiphers,omitempty" tf:"preferred_ciphers,omitempty"`

	// Enable QUIC protocol. Default is false
	QuicEnabled *bool `json:"quicEnabled,omitempty" tf:"quic_enabled,omitempty"`
}

type ThirdPartyEnrollmentNetworkConfigurationParameters struct {

	// The trust chain configuration used for client mutual authentication
	// +kubebuilder:validation:Optional
	ClientMutualAuthentication []NetworkConfigurationClientMutualAuthenticationParameters `json:"clientMutualAuthentication,omitempty" tf:"client_mutual_authentication,omitempty"`

	// Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
	// +kubebuilder:validation:Optional
	CloneDNSNames *bool `json:"cloneDnsNames,omitempty" tf:"clone_dns_names,omitempty"`

	// TLS versions which are disallowed
	// +kubebuilder:validation:Optional
	// +listType=set
	DisallowedTLSVersions []*string `json:"disallowedTlsVersions,omitempty" tf:"disallowed_tls_versions,omitempty"`

	// Geography type used for enrollment
	// +kubebuilder:validation:Optional
	Geography *string `json:"geography" tf:"geography,omitempty"`

	// Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	// +kubebuilder:validation:Optional
	MustHaveCiphers *string `json:"mustHaveCiphers,omitempty" tf:"must_have_ciphers,omitempty"`

	// Enable OCSP stapling. Default is 'on'
	// +kubebuilder:validation:Optional
	OcspStapling *string `json:"ocspStapling,omitempty" tf:"ocsp_stapling,omitempty"`

	// Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	// +kubebuilder:validation:Optional
	PreferredCiphers *string `json:"preferredCiphers,omitempty" tf:"preferred_ciphers,omitempty"`

	// Enable QUIC protocol. Default is false
	// +kubebuilder:validation:Optional
	QuicEnabled *bool `json:"quicEnabled,omitempty" tf:"quic_enabled,omitempty"`
}

type ThirdPartyEnrollmentObservation struct {

	// Whether acknowledge warnings before certificate verification. Default is false
	AcknowledgePreVerificationWarnings *bool `json:"acknowledgePreVerificationWarnings,omitempty" tf:"acknowledge_pre_verification_warnings,omitempty"`

	// Contact information for the certificate administrator to use at organization
	AdminContact []ThirdPartyEnrollmentAdminContactObservation `json:"adminContact,omitempty" tf:"admin_contact,omitempty"`

	// Allow to duplicate common name. Default is false
	AllowDuplicateCommonName *bool `json:"allowDuplicateCommonName,omitempty" tf:"allow_duplicate_common_name,omitempty"`

	// List of warnings to be automatically approved
	// +listType=set
	AutoApproveWarnings []*string `json:"autoApproveWarnings,omitempty" tf:"auto_approve_warnings,omitempty"`

	// Certificate trust chain type. Default is 'default'
	CertificateChainType *string `json:"certificateChainType,omitempty" tf:"certificate_chain_type,omitempty"`

	// When set to false, the certificate will be deployed to both staging and production networks
	ChangeManagement *bool `json:"changeManagement,omitempty" tf:"change_management,omitempty"`

	// Common name used for enrollment
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// Contract ID for which enrollment is retrieved
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Data used for generation of Certificate Signing Request
	Csr []ThirdPartyEnrollmentCsrObservation `json:"csr,omitempty" tf:"csr,omitempty"`

	// When true, SANs are excluded from the CSR
	ExcludeSans *bool `json:"excludeSans,omitempty" tf:"exclude_sans,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Settings containing network information and TLS metadata used by CPS
	NetworkConfiguration []ThirdPartyEnrollmentNetworkConfigurationObservation `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// Organization information
	Organization []ThirdPartyEnrollmentOrganizationObservation `json:"organization,omitempty" tf:"organization,omitempty"`

	// List of SANs
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`

	// Type of TLS deployment network
	SecureNetwork *string `json:"secureNetwork,omitempty" tf:"secure_network,omitempty"`

	// The SHA function
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// Whether Server Name Indication is used for enrollment
	SniOnly *bool `json:"sniOnly,omitempty" tf:"sni_only,omitempty"`

	// Contact information for an administrator at Akamai
	TechContact []ThirdPartyEnrollmentTechContactObservation `json:"techContact,omitempty" tf:"tech_contact,omitempty"`
}

type ThirdPartyEnrollmentOrganizationInitParameters struct {

	// The address of organization
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of organization
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of organization
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of organization
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Name of organization
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Phone number of organization
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of organization
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of organization
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ThirdPartyEnrollmentOrganizationObservation struct {

	// The address of organization
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of organization
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of organization
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of organization
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Name of organization
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Phone number of organization
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of organization
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of organization
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ThirdPartyEnrollmentOrganizationParameters struct {

	// The address of organization
	// +kubebuilder:validation:Optional
	AddressLineOne *string `json:"addressLineOne" tf:"address_line_one,omitempty"`

	// The address of organization
	// +kubebuilder:validation:Optional
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of organization
	// +kubebuilder:validation:Optional
	City *string `json:"city" tf:"city,omitempty"`

	// Country code of organization
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode" tf:"country_code,omitempty"`

	// Name of organization
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Phone number of organization
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone" tf:"phone,omitempty"`

	// Postal code of organization
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode" tf:"postal_code,omitempty"`

	// The region of organization
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`
}

type ThirdPartyEnrollmentParameters struct {

	// Whether acknowledge warnings before certificate verification. Default is false
	// +kubebuilder:validation:Optional
	AcknowledgePreVerificationWarnings *bool `json:"acknowledgePreVerificationWarnings,omitempty" tf:"acknowledge_pre_verification_warnings,omitempty"`

	// Contact information for the certificate administrator to use at organization
	// +kubebuilder:validation:Optional
	AdminContact []ThirdPartyEnrollmentAdminContactParameters `json:"adminContact,omitempty" tf:"admin_contact,omitempty"`

	// Allow to duplicate common name. Default is false
	// +kubebuilder:validation:Optional
	AllowDuplicateCommonName *bool `json:"allowDuplicateCommonName,omitempty" tf:"allow_duplicate_common_name,omitempty"`

	// List of warnings to be automatically approved
	// +kubebuilder:validation:Optional
	// +listType=set
	AutoApproveWarnings []*string `json:"autoApproveWarnings,omitempty" tf:"auto_approve_warnings,omitempty"`

	// Certificate trust chain type. Default is 'default'
	// +kubebuilder:validation:Optional
	CertificateChainType *string `json:"certificateChainType,omitempty" tf:"certificate_chain_type,omitempty"`

	// When set to false, the certificate will be deployed to both staging and production networks
	// +kubebuilder:validation:Optional
	ChangeManagement *bool `json:"changeManagement,omitempty" tf:"change_management,omitempty"`

	// Common name used for enrollment
	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// Contract ID for which enrollment is retrieved
	// +kubebuilder:validation:Optional
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Data used for generation of Certificate Signing Request
	// +kubebuilder:validation:Optional
	Csr []ThirdPartyEnrollmentCsrParameters `json:"csr,omitempty" tf:"csr,omitempty"`

	// When true, SANs are excluded from the CSR
	// +kubebuilder:validation:Optional
	ExcludeSans *bool `json:"excludeSans,omitempty" tf:"exclude_sans,omitempty"`

	// Settings containing network information and TLS metadata used by CPS
	// +kubebuilder:validation:Optional
	NetworkConfiguration []ThirdPartyEnrollmentNetworkConfigurationParameters `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// Organization information
	// +kubebuilder:validation:Optional
	Organization []ThirdPartyEnrollmentOrganizationParameters `json:"organization,omitempty" tf:"organization,omitempty"`

	// List of SANs
	// +kubebuilder:validation:Optional
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`

	// Type of TLS deployment network
	// +kubebuilder:validation:Optional
	SecureNetwork *string `json:"secureNetwork,omitempty" tf:"secure_network,omitempty"`

	// The SHA function
	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// Whether Server Name Indication is used for enrollment
	// +kubebuilder:validation:Optional
	SniOnly *bool `json:"sniOnly,omitempty" tf:"sni_only,omitempty"`

	// Contact information for an administrator at Akamai
	// +kubebuilder:validation:Optional
	TechContact []ThirdPartyEnrollmentTechContactParameters `json:"techContact,omitempty" tf:"tech_contact,omitempty"`
}

type ThirdPartyEnrollmentTechContactInitParameters struct {

	// The address of the contact
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// First name of the contact
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// Last name of the contact
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Organization where contact is hired
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of the contact
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ThirdPartyEnrollmentTechContactObservation struct {

	// The address of the contact
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// First name of the contact
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// Last name of the contact
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Organization where contact is hired
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of the contact
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ThirdPartyEnrollmentTechContactParameters struct {

	// The address of the contact
	// +kubebuilder:validation:Optional
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	// +kubebuilder:validation:Optional
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// First name of the contact
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName" tf:"first_name,omitempty"`

	// Last name of the contact
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName" tf:"last_name,omitempty"`

	// Organization where contact is hired
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone" tf:"phone,omitempty"`

	// Postal code of the contact
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

// ThirdPartyEnrollmentSpec defines the desired state of ThirdPartyEnrollment
type ThirdPartyEnrollmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ThirdPartyEnrollmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ThirdPartyEnrollmentInitParameters `json:"initProvider,omitempty"`
}

// ThirdPartyEnrollmentStatus defines the observed state of ThirdPartyEnrollment.
type ThirdPartyEnrollmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ThirdPartyEnrollmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ThirdPartyEnrollment is the Schema for the ThirdPartyEnrollments API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type ThirdPartyEnrollment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.adminContact) || (has(self.initProvider) && has(self.initProvider.adminContact))",message="spec.forProvider.adminContact is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || (has(self.initProvider) && has(self.initProvider.commonName))",message="spec.forProvider.commonName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contractId) || (has(self.initProvider) && has(self.initProvider.contractId))",message="spec.forProvider.contractId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.csr) || (has(self.initProvider) && has(self.initProvider.csr))",message="spec.forProvider.csr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkConfiguration) || (has(self.initProvider) && has(self.initProvider.networkConfiguration))",message="spec.forProvider.networkConfiguration is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secureNetwork) || (has(self.initProvider) && has(self.initProvider.secureNetwork))",message="spec.forProvider.secureNetwork is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sniOnly) || (has(self.initProvider) && has(self.initProvider.sniOnly))",message="spec.forProvider.sniOnly is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.techContact) || (has(self.initProvider) && has(self.initProvider.techContact))",message="spec.forProvider.techContact is a required parameter"
	Spec   ThirdPartyEnrollmentSpec   `json:"spec"`
	Status ThirdPartyEnrollmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ThirdPartyEnrollmentList contains a list of ThirdPartyEnrollments
type ThirdPartyEnrollmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ThirdPartyEnrollment `json:"items"`
}

// Repository type metadata.
var (
	ThirdPartyEnrollment_Kind             = "ThirdPartyEnrollment"
	ThirdPartyEnrollment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ThirdPartyEnrollment_Kind}.String()
	ThirdPartyEnrollment_KindAPIVersion   = ThirdPartyEnrollment_Kind + "." + CRDGroupVersion.String()
	ThirdPartyEnrollment_GroupVersionKind = CRDGroupVersion.WithKind(ThirdPartyEnrollment_Kind)
)

func init() {
	SchemeBuilder.Register(&ThirdPartyEnrollment{}, &ThirdPartyEnrollmentList{})
}
