// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DvValidationInitParameters struct {

	// Whether to acknowledge all post-verification warnings
	AcknowledgePostVerificationWarnings *bool `json:"acknowledgePostVerificationWarnings,omitempty" tf:"acknowledge_post_verification_warnings,omitempty"`

	// The unique identifier of enrollment
	EnrollmentID *float64 `json:"enrollmentId,omitempty" tf:"enrollment_id,omitempty"`

	// List of SANs
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`
}

type DvValidationObservation struct {

	// Whether to acknowledge all post-verification warnings
	AcknowledgePostVerificationWarnings *bool `json:"acknowledgePostVerificationWarnings,omitempty" tf:"acknowledge_post_verification_warnings,omitempty"`

	// The unique identifier of enrollment
	EnrollmentID *float64 `json:"enrollmentId,omitempty" tf:"enrollment_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of SANs
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`

	// Status of validation
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type DvValidationParameters struct {

	// Whether to acknowledge all post-verification warnings
	// +kubebuilder:validation:Optional
	AcknowledgePostVerificationWarnings *bool `json:"acknowledgePostVerificationWarnings,omitempty" tf:"acknowledge_post_verification_warnings,omitempty"`

	// The unique identifier of enrollment
	// +kubebuilder:validation:Optional
	EnrollmentID *float64 `json:"enrollmentId,omitempty" tf:"enrollment_id,omitempty"`

	// List of SANs
	// +kubebuilder:validation:Optional
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`
}

// DvValidationSpec defines the desired state of DvValidation
type DvValidationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DvValidationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DvValidationInitParameters `json:"initProvider,omitempty"`
}

// DvValidationStatus defines the observed state of DvValidation.
type DvValidationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DvValidationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DvValidation is the Schema for the DvValidations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type DvValidation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enrollmentId) || (has(self.initProvider) && has(self.initProvider.enrollmentId))",message="spec.forProvider.enrollmentId is a required parameter"
	Spec   DvValidationSpec   `json:"spec"`
	Status DvValidationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DvValidationList contains a list of DvValidations
type DvValidationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DvValidation `json:"items"`
}

// Repository type metadata.
var (
	DvValidation_Kind             = "DvValidation"
	DvValidation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DvValidation_Kind}.String()
	DvValidation_KindAPIVersion   = DvValidation_Kind + "." + CRDGroupVersion.String()
	DvValidation_GroupVersionKind = CRDGroupVersion.WithKind(DvValidation_Kind)
)

func init() {
	SchemeBuilder.Register(&DvValidation{}, &DvValidationList{})
}
