// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdminContactInitParameters struct {

	// The address of the contact
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// First name of the contact
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// Last name of the contact
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Organization where contact is hired
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of the contact
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type AdminContactObservation struct {

	// The address of the contact
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// First name of the contact
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// Last name of the contact
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Organization where contact is hired
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of the contact
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type AdminContactParameters struct {

	// The address of the contact
	// +kubebuilder:validation:Optional
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	// +kubebuilder:validation:Optional
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// First name of the contact
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName" tf:"first_name,omitempty"`

	// Last name of the contact
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName" tf:"last_name,omitempty"`

	// Organization where contact is hired
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone" tf:"phone,omitempty"`

	// Postal code of the contact
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type ClientMutualAuthenticationInitParameters struct {

	// Enable OCSP stapling
	OcspEnabled *bool `json:"ocspEnabled,omitempty" tf:"ocsp_enabled,omitempty"`

	// Enable the server to send the certificate authority (CA) list to the client
	SendCAListToClient *bool `json:"sendCaListToClient,omitempty" tf:"send_ca_list_to_client,omitempty"`

	// The identifier of the set of trust chains, created in the Trust Chain Manager
	SetID *string `json:"setId,omitempty" tf:"set_id,omitempty"`
}

type ClientMutualAuthenticationObservation struct {

	// Enable OCSP stapling
	OcspEnabled *bool `json:"ocspEnabled,omitempty" tf:"ocsp_enabled,omitempty"`

	// Enable the server to send the certificate authority (CA) list to the client
	SendCAListToClient *bool `json:"sendCaListToClient,omitempty" tf:"send_ca_list_to_client,omitempty"`

	// The identifier of the set of trust chains, created in the Trust Chain Manager
	SetID *string `json:"setId,omitempty" tf:"set_id,omitempty"`
}

type ClientMutualAuthenticationParameters struct {

	// Enable OCSP stapling
	// +kubebuilder:validation:Optional
	OcspEnabled *bool `json:"ocspEnabled,omitempty" tf:"ocsp_enabled,omitempty"`

	// Enable the server to send the certificate authority (CA) list to the client
	// +kubebuilder:validation:Optional
	SendCAListToClient *bool `json:"sendCaListToClient,omitempty" tf:"send_ca_list_to_client,omitempty"`

	// The identifier of the set of trust chains, created in the Trust Chain Manager
	// +kubebuilder:validation:Optional
	SetID *string `json:"setId,omitempty" tf:"set_id,omitempty"`
}

type CsrInitParameters struct {

	// City where organization is located
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// The code of the country where organization is located
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Name of organization used in all legal documents
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Organizational unit of organization
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	// For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
	PreferredTrustChain *string `json:"preferredTrustChain,omitempty" tf:"preferred_trust_chain,omitempty"`

	// State or province of organization location
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CsrObservation struct {

	// City where organization is located
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// The code of the country where organization is located
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Name of organization used in all legal documents
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Organizational unit of organization
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	// For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
	PreferredTrustChain *string `json:"preferredTrustChain,omitempty" tf:"preferred_trust_chain,omitempty"`

	// State or province of organization location
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CsrParameters struct {

	// City where organization is located
	// +kubebuilder:validation:Optional
	City *string `json:"city" tf:"city,omitempty"`

	// The code of the country where organization is located
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode" tf:"country_code,omitempty"`

	// Name of organization used in all legal documents
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization" tf:"organization,omitempty"`

	// Organizational unit of organization
	// +kubebuilder:validation:Optional
	OrganizationalUnit *string `json:"organizationalUnit,omitempty" tf:"organizational_unit,omitempty"`

	// For the Let's Encrypt Domain Validated (DV) SAN certificates, the preferred trust chain will be included by CPS with the leaf certificate in the TLS handshake. If the field does not have a value, whichever trust chain Akamai chooses will be used by default
	// +kubebuilder:validation:Optional
	PreferredTrustChain *string `json:"preferredTrustChain,omitempty" tf:"preferred_trust_chain,omitempty"`

	// State or province of organization location
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type DNSChallengesInitParameters struct {
}

type DNSChallengesObservation struct {
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	FullPath *string `json:"fullPath,omitempty" tf:"full_path,omitempty"`

	ResponseBody *string `json:"responseBody,omitempty" tf:"response_body,omitempty"`
}

type DNSChallengesParameters struct {
}

type DvEnrollmentInitParameters struct {

	// Whether acknowledge warnings before certificate verification. Default is false
	AcknowledgePreVerificationWarnings *bool `json:"acknowledgePreVerificationWarnings,omitempty" tf:"acknowledge_pre_verification_warnings,omitempty"`

	// Contact information for the certificate administrator to use at organization
	AdminContact []AdminContactInitParameters `json:"adminContact,omitempty" tf:"admin_contact,omitempty"`

	// Allow to duplicate common name. Default is false
	AllowDuplicateCommonName *bool `json:"allowDuplicateCommonName,omitempty" tf:"allow_duplicate_common_name,omitempty"`

	// Certificate trust chain type. Default is 'default'
	CertificateChainType *string `json:"certificateChainType,omitempty" tf:"certificate_chain_type,omitempty"`

	// Common name used for enrollment
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// Contract ID for which enrollment is retrieved
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Certificate signing request generated during enrollment creation
	Csr []CsrInitParameters `json:"csr,omitempty" tf:"csr,omitempty"`

	// Settings containing network information and TLS Metadata used by CPS
	NetworkConfiguration []NetworkConfigurationInitParameters `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// Organization information
	Organization []OrganizationInitParameters `json:"organization,omitempty" tf:"organization,omitempty"`

	// List of SANs
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`

	// Type of TLS deployment network
	SecureNetwork *string `json:"secureNetwork,omitempty" tf:"secure_network,omitempty"`

	// SHA algorithm type
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// Whether Server Name Indication is used for enrollment
	SniOnly *bool `json:"sniOnly,omitempty" tf:"sni_only,omitempty"`

	// Contact information for an administrator at Akamai
	TechContact []TechContactInitParameters `json:"techContact,omitempty" tf:"tech_contact,omitempty"`
}

type DvEnrollmentObservation struct {

	// Whether acknowledge warnings before certificate verification. Default is false
	AcknowledgePreVerificationWarnings *bool `json:"acknowledgePreVerificationWarnings,omitempty" tf:"acknowledge_pre_verification_warnings,omitempty"`

	// Contact information for the certificate administrator to use at organization
	AdminContact []AdminContactObservation `json:"adminContact,omitempty" tf:"admin_contact,omitempty"`

	// Allow to duplicate common name. Default is false
	AllowDuplicateCommonName *bool `json:"allowDuplicateCommonName,omitempty" tf:"allow_duplicate_common_name,omitempty"`

	// Certificate trust chain type. Default is 'default'
	CertificateChainType *string `json:"certificateChainType,omitempty" tf:"certificate_chain_type,omitempty"`

	// Certificate type of enrollment
	CertificateType *string `json:"certificateType,omitempty" tf:"certificate_type,omitempty"`

	// Common name used for enrollment
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// Contract ID for which enrollment is retrieved
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Certificate signing request generated during enrollment creation
	Csr []CsrObservation `json:"csr,omitempty" tf:"csr,omitempty"`

	// DNS challenge information
	DNSChallenges []DNSChallengesObservation `json:"dnsChallenges,omitempty" tf:"dns_challenges,omitempty"`

	// HTTP challenge information
	HTTPChallenges []HTTPChallengesObservation `json:"httpChallenges,omitempty" tf:"http_challenges,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Settings containing network information and TLS Metadata used by CPS
	NetworkConfiguration []NetworkConfigurationObservation `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// Organization information
	Organization []OrganizationObservation `json:"organization,omitempty" tf:"organization,omitempty"`

	// The registration authority or certificate authority (CA) used to obtain a certificate
	RegistrationAuthority *string `json:"registrationAuthority,omitempty" tf:"registration_authority,omitempty"`

	// List of SANs
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`

	// Type of TLS deployment network
	SecureNetwork *string `json:"secureNetwork,omitempty" tf:"secure_network,omitempty"`

	// SHA algorithm type
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// Whether Server Name Indication is used for enrollment
	SniOnly *bool `json:"sniOnly,omitempty" tf:"sni_only,omitempty"`

	// Contact information for an administrator at Akamai
	TechContact []TechContactObservation `json:"techContact,omitempty" tf:"tech_contact,omitempty"`

	// Enrolment validation type
	ValidationType *string `json:"validationType,omitempty" tf:"validation_type,omitempty"`
}

type DvEnrollmentParameters struct {

	// Whether acknowledge warnings before certificate verification. Default is false
	// +kubebuilder:validation:Optional
	AcknowledgePreVerificationWarnings *bool `json:"acknowledgePreVerificationWarnings,omitempty" tf:"acknowledge_pre_verification_warnings,omitempty"`

	// Contact information for the certificate administrator to use at organization
	// +kubebuilder:validation:Optional
	AdminContact []AdminContactParameters `json:"adminContact,omitempty" tf:"admin_contact,omitempty"`

	// Allow to duplicate common name. Default is false
	// +kubebuilder:validation:Optional
	AllowDuplicateCommonName *bool `json:"allowDuplicateCommonName,omitempty" tf:"allow_duplicate_common_name,omitempty"`

	// Certificate trust chain type. Default is 'default'
	// +kubebuilder:validation:Optional
	CertificateChainType *string `json:"certificateChainType,omitempty" tf:"certificate_chain_type,omitempty"`

	// Common name used for enrollment
	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// Contract ID for which enrollment is retrieved
	// +kubebuilder:validation:Optional
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Certificate signing request generated during enrollment creation
	// +kubebuilder:validation:Optional
	Csr []CsrParameters `json:"csr,omitempty" tf:"csr,omitempty"`

	// Settings containing network information and TLS Metadata used by CPS
	// +kubebuilder:validation:Optional
	NetworkConfiguration []NetworkConfigurationParameters `json:"networkConfiguration,omitempty" tf:"network_configuration,omitempty"`

	// Organization information
	// +kubebuilder:validation:Optional
	Organization []OrganizationParameters `json:"organization,omitempty" tf:"organization,omitempty"`

	// List of SANs
	// +kubebuilder:validation:Optional
	// +listType=set
	Sans []*string `json:"sans,omitempty" tf:"sans,omitempty"`

	// Type of TLS deployment network
	// +kubebuilder:validation:Optional
	SecureNetwork *string `json:"secureNetwork,omitempty" tf:"secure_network,omitempty"`

	// SHA algorithm type
	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// Whether Server Name Indication is used for enrollment
	// +kubebuilder:validation:Optional
	SniOnly *bool `json:"sniOnly,omitempty" tf:"sni_only,omitempty"`

	// Contact information for an administrator at Akamai
	// +kubebuilder:validation:Optional
	TechContact []TechContactParameters `json:"techContact,omitempty" tf:"tech_contact,omitempty"`
}

type HTTPChallengesInitParameters struct {
}

type HTTPChallengesObservation struct {
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	FullPath *string `json:"fullPath,omitempty" tf:"full_path,omitempty"`

	ResponseBody *string `json:"responseBody,omitempty" tf:"response_body,omitempty"`
}

type HTTPChallengesParameters struct {
}

type NetworkConfigurationInitParameters struct {

	// The trust chain configuration used for client mutual authentication
	ClientMutualAuthentication []ClientMutualAuthenticationInitParameters `json:"clientMutualAuthentication,omitempty" tf:"client_mutual_authentication,omitempty"`

	// Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
	CloneDNSNames *bool `json:"cloneDnsNames,omitempty" tf:"clone_dns_names,omitempty"`

	// TLS versions which are disallowed
	// +listType=set
	DisallowedTLSVersions []*string `json:"disallowedTlsVersions,omitempty" tf:"disallowed_tls_versions,omitempty"`

	// Geography type used for enrollment
	Geography *string `json:"geography,omitempty" tf:"geography,omitempty"`

	// Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	MustHaveCiphers *string `json:"mustHaveCiphers,omitempty" tf:"must_have_ciphers,omitempty"`

	// Enable OCSP stapling. Default is 'on'
	OcspStapling *string `json:"ocspStapling,omitempty" tf:"ocsp_stapling,omitempty"`

	// Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	PreferredCiphers *string `json:"preferredCiphers,omitempty" tf:"preferred_ciphers,omitempty"`

	// Enable QUIC protocol. Default is false
	QuicEnabled *bool `json:"quicEnabled,omitempty" tf:"quic_enabled,omitempty"`
}

type NetworkConfigurationObservation struct {

	// The trust chain configuration used for client mutual authentication
	ClientMutualAuthentication []ClientMutualAuthenticationObservation `json:"clientMutualAuthentication,omitempty" tf:"client_mutual_authentication,omitempty"`

	// Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
	CloneDNSNames *bool `json:"cloneDnsNames,omitempty" tf:"clone_dns_names,omitempty"`

	// TLS versions which are disallowed
	// +listType=set
	DisallowedTLSVersions []*string `json:"disallowedTlsVersions,omitempty" tf:"disallowed_tls_versions,omitempty"`

	// Geography type used for enrollment
	Geography *string `json:"geography,omitempty" tf:"geography,omitempty"`

	// Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	MustHaveCiphers *string `json:"mustHaveCiphers,omitempty" tf:"must_have_ciphers,omitempty"`

	// Enable OCSP stapling. Default is 'on'
	OcspStapling *string `json:"ocspStapling,omitempty" tf:"ocsp_stapling,omitempty"`

	// Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	PreferredCiphers *string `json:"preferredCiphers,omitempty" tf:"preferred_ciphers,omitempty"`

	// Enable QUIC protocol. Default is false
	QuicEnabled *bool `json:"quicEnabled,omitempty" tf:"quic_enabled,omitempty"`
}

type NetworkConfigurationParameters struct {

	// The trust chain configuration used for client mutual authentication
	// +kubebuilder:validation:Optional
	ClientMutualAuthentication []ClientMutualAuthenticationParameters `json:"clientMutualAuthentication,omitempty" tf:"client_mutual_authentication,omitempty"`

	// Enable CPS to direct traffic using all the SANs listed in the SANs parameter when enrollment is created. Default is false
	// +kubebuilder:validation:Optional
	CloneDNSNames *bool `json:"cloneDnsNames,omitempty" tf:"clone_dns_names,omitempty"`

	// TLS versions which are disallowed
	// +kubebuilder:validation:Optional
	// +listType=set
	DisallowedTLSVersions []*string `json:"disallowedTlsVersions,omitempty" tf:"disallowed_tls_versions,omitempty"`

	// Geography type used for enrollment
	// +kubebuilder:validation:Optional
	Geography *string `json:"geography" tf:"geography,omitempty"`

	// Mandatory Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	// +kubebuilder:validation:Optional
	MustHaveCiphers *string `json:"mustHaveCiphers,omitempty" tf:"must_have_ciphers,omitempty"`

	// Enable OCSP stapling. Default is 'on'
	// +kubebuilder:validation:Optional
	OcspStapling *string `json:"ocspStapling,omitempty" tf:"ocsp_stapling,omitempty"`

	// Preferred Ciphers which are included for enrollment. Default is 'ak-akamai-2020q1'
	// +kubebuilder:validation:Optional
	PreferredCiphers *string `json:"preferredCiphers,omitempty" tf:"preferred_ciphers,omitempty"`

	// Enable QUIC protocol. Default is false
	// +kubebuilder:validation:Optional
	QuicEnabled *bool `json:"quicEnabled,omitempty" tf:"quic_enabled,omitempty"`
}

type OrganizationInitParameters struct {

	// The address of organization
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of organization
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of organization
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of organization
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Name of organization
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Phone number of organization
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of organization
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of organization
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type OrganizationObservation struct {

	// The address of organization
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of organization
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of organization
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of organization
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// Name of organization
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Phone number of organization
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of organization
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of organization
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type OrganizationParameters struct {

	// The address of organization
	// +kubebuilder:validation:Optional
	AddressLineOne *string `json:"addressLineOne" tf:"address_line_one,omitempty"`

	// The address of organization
	// +kubebuilder:validation:Optional
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of organization
	// +kubebuilder:validation:Optional
	City *string `json:"city" tf:"city,omitempty"`

	// Country code of organization
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode" tf:"country_code,omitempty"`

	// Name of organization
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Phone number of organization
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone" tf:"phone,omitempty"`

	// Postal code of organization
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode" tf:"postal_code,omitempty"`

	// The region of organization
	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`
}

type TechContactInitParameters struct {

	// The address of the contact
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// First name of the contact
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// Last name of the contact
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Organization where contact is hired
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of the contact
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type TechContactObservation struct {

	// The address of the contact
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// First name of the contact
	FirstName *string `json:"firstName,omitempty" tf:"first_name,omitempty"`

	// Last name of the contact
	LastName *string `json:"lastName,omitempty" tf:"last_name,omitempty"`

	// Organization where contact is hired
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`

	// Postal code of the contact
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

type TechContactParameters struct {

	// The address of the contact
	// +kubebuilder:validation:Optional
	AddressLineOne *string `json:"addressLineOne,omitempty" tf:"address_line_one,omitempty"`

	// The address of the contact
	// +kubebuilder:validation:Optional
	AddressLineTwo *string `json:"addressLineTwo,omitempty" tf:"address_line_two,omitempty"`

	// City of residence of the contact
	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// Country code of the contact
	// +kubebuilder:validation:Optional
	CountryCode *string `json:"countryCode,omitempty" tf:"country_code,omitempty"`

	// E-mail address of the contact
	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// First name of the contact
	// +kubebuilder:validation:Optional
	FirstName *string `json:"firstName" tf:"first_name,omitempty"`

	// Last name of the contact
	// +kubebuilder:validation:Optional
	LastName *string `json:"lastName" tf:"last_name,omitempty"`

	// Organization where contact is hired
	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// Phone number of the contact
	// +kubebuilder:validation:Optional
	Phone *string `json:"phone" tf:"phone,omitempty"`

	// Postal code of the contact
	// +kubebuilder:validation:Optional
	PostalCode *string `json:"postalCode,omitempty" tf:"postal_code,omitempty"`

	// The region of the contact
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Title of the the contact
	// +kubebuilder:validation:Optional
	Title *string `json:"title,omitempty" tf:"title,omitempty"`
}

// DvEnrollmentSpec defines the desired state of DvEnrollment
type DvEnrollmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DvEnrollmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DvEnrollmentInitParameters `json:"initProvider,omitempty"`
}

// DvEnrollmentStatus defines the observed state of DvEnrollment.
type DvEnrollmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DvEnrollmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DvEnrollment is the Schema for the DvEnrollments API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type DvEnrollment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.adminContact) || (has(self.initProvider) && has(self.initProvider.adminContact))",message="spec.forProvider.adminContact is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.commonName) || (has(self.initProvider) && has(self.initProvider.commonName))",message="spec.forProvider.commonName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contractId) || (has(self.initProvider) && has(self.initProvider.contractId))",message="spec.forProvider.contractId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.csr) || (has(self.initProvider) && has(self.initProvider.csr))",message="spec.forProvider.csr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.networkConfiguration) || (has(self.initProvider) && has(self.initProvider.networkConfiguration))",message="spec.forProvider.networkConfiguration is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.organization) || (has(self.initProvider) && has(self.initProvider.organization))",message="spec.forProvider.organization is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.secureNetwork) || (has(self.initProvider) && has(self.initProvider.secureNetwork))",message="spec.forProvider.secureNetwork is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.signatureAlgorithm) || (has(self.initProvider) && has(self.initProvider.signatureAlgorithm))",message="spec.forProvider.signatureAlgorithm is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.sniOnly) || (has(self.initProvider) && has(self.initProvider.sniOnly))",message="spec.forProvider.sniOnly is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.techContact) || (has(self.initProvider) && has(self.initProvider.techContact))",message="spec.forProvider.techContact is a required parameter"
	Spec   DvEnrollmentSpec   `json:"spec"`
	Status DvEnrollmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DvEnrollmentList contains a list of DvEnrollments
type DvEnrollmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DvEnrollment `json:"items"`
}

// Repository type metadata.
var (
	DvEnrollment_Kind             = "DvEnrollment"
	DvEnrollment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DvEnrollment_Kind}.String()
	DvEnrollment_KindAPIVersion   = DvEnrollment_Kind + "." + CRDGroupVersion.String()
	DvEnrollment_GroupVersionKind = CRDGroupVersion.WithKind(DvEnrollment_Kind)
)

func init() {
	SchemeBuilder.Register(&DvEnrollment{}, &DvEnrollmentList{})
}
