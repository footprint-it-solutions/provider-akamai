// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContentProtectionRuleSequenceInitParameters struct {

	// Unique identifier of the security configuration
	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Unique identifiers of content protection rules, listed in the order of their evaluation
	ContentProtectionRuleIds []*string `json:"contentProtectionRuleIds,omitempty" tf:"content_protection_rule_ids,omitempty"`

	// Unique identifier of the security policy
	SecurityPolicyID *string `json:"securityPolicyId,omitempty" tf:"security_policy_id,omitempty"`
}

type ContentProtectionRuleSequenceObservation struct {

	// Unique identifier of the security configuration
	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Unique identifiers of content protection rules, listed in the order of their evaluation
	ContentProtectionRuleIds []*string `json:"contentProtectionRuleIds,omitempty" tf:"content_protection_rule_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Unique identifier of the security policy
	SecurityPolicyID *string `json:"securityPolicyId,omitempty" tf:"security_policy_id,omitempty"`
}

type ContentProtectionRuleSequenceParameters struct {

	// Unique identifier of the security configuration
	// +kubebuilder:validation:Optional
	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Unique identifiers of content protection rules, listed in the order of their evaluation
	// +kubebuilder:validation:Optional
	ContentProtectionRuleIds []*string `json:"contentProtectionRuleIds,omitempty" tf:"content_protection_rule_ids,omitempty"`

	// Unique identifier of the security policy
	// +kubebuilder:validation:Optional
	SecurityPolicyID *string `json:"securityPolicyId,omitempty" tf:"security_policy_id,omitempty"`
}

// ContentProtectionRuleSequenceSpec defines the desired state of ContentProtectionRuleSequence
type ContentProtectionRuleSequenceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContentProtectionRuleSequenceParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ContentProtectionRuleSequenceInitParameters `json:"initProvider,omitempty"`
}

// ContentProtectionRuleSequenceStatus defines the observed state of ContentProtectionRuleSequence.
type ContentProtectionRuleSequenceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContentProtectionRuleSequenceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ContentProtectionRuleSequence is the Schema for the ContentProtectionRuleSequences API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type ContentProtectionRuleSequence struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configId) || (has(self.initProvider) && has(self.initProvider.configId))",message="spec.forProvider.configId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contentProtectionRuleIds) || (has(self.initProvider) && has(self.initProvider.contentProtectionRuleIds))",message="spec.forProvider.contentProtectionRuleIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.securityPolicyId) || (has(self.initProvider) && has(self.initProvider.securityPolicyId))",message="spec.forProvider.securityPolicyId is a required parameter"
	Spec   ContentProtectionRuleSequenceSpec   `json:"spec"`
	Status ContentProtectionRuleSequenceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContentProtectionRuleSequenceList contains a list of ContentProtectionRuleSequences
type ContentProtectionRuleSequenceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContentProtectionRuleSequence `json:"items"`
}

// Repository type metadata.
var (
	ContentProtectionRuleSequence_Kind             = "ContentProtectionRuleSequence"
	ContentProtectionRuleSequence_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContentProtectionRuleSequence_Kind}.String()
	ContentProtectionRuleSequence_KindAPIVersion   = ContentProtectionRuleSequence_Kind + "." + CRDGroupVersion.String()
	ContentProtectionRuleSequence_GroupVersionKind = CRDGroupVersion.WithKind(ContentProtectionRuleSequence_Kind)
)

func init() {
	SchemeBuilder.Register(&ContentProtectionRuleSequence{}, &ContentProtectionRuleSequenceList{})
}
