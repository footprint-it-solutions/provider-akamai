// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChallengeActionInitParameters struct {
	ChallengeAction *string `json:"challengeAction,omitempty" tf:"challenge_action,omitempty"`

	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`
}

type ChallengeActionObservation struct {
	ActionID *string `json:"actionId,omitempty" tf:"action_id,omitempty"`

	ChallengeAction *string `json:"challengeAction,omitempty" tf:"challenge_action,omitempty"`

	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ChallengeActionParameters struct {

	// +kubebuilder:validation:Optional
	ChallengeAction *string `json:"challengeAction,omitempty" tf:"challenge_action,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`
}

// ChallengeActionSpec defines the desired state of ChallengeAction
type ChallengeActionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChallengeActionParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ChallengeActionInitParameters `json:"initProvider,omitempty"`
}

// ChallengeActionStatus defines the observed state of ChallengeAction.
type ChallengeActionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChallengeActionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ChallengeAction is the Schema for the ChallengeActions API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type ChallengeAction struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.challengeAction) || (has(self.initProvider) && has(self.initProvider.challengeAction))",message="spec.forProvider.challengeAction is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configId) || (has(self.initProvider) && has(self.initProvider.configId))",message="spec.forProvider.configId is a required parameter"
	Spec   ChallengeActionSpec   `json:"spec"`
	Status ChallengeActionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChallengeActionList contains a list of ChallengeActions
type ChallengeActionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChallengeAction `json:"items"`
}

// Repository type metadata.
var (
	ChallengeAction_Kind             = "ChallengeAction"
	ChallengeAction_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChallengeAction_Kind}.String()
	ChallengeAction_KindAPIVersion   = ChallengeAction_Kind + "." + CRDGroupVersion.String()
	ChallengeAction_GroupVersionKind = CRDGroupVersion.WithKind(ChallengeAction_Kind)
)

func init() {
	SchemeBuilder.Register(&ChallengeAction{}, &ChallengeActionList{})
}
