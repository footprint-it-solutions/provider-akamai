// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationInitParameters struct {

	// Unique identifier of the Akamai contract associated with the new configuration
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Unique identifier of the existing configuration being cloned to create the new configuration
	CreateFromConfigID *float64 `json:"createFromConfigId,omitempty" tf:"create_from_config_id,omitempty"`

	// Version number of the existing configuration being cloned to create the new configuration
	CreateFromVersion *float64 `json:"createFromVersion,omitempty" tf:"create_from_version,omitempty"`

	// Brief description of the new configuration
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Unique identifier of the contract group associated with the new configuration
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Hostnames to be protected by the new configuration
	// +listType=set
	HostNames []*string `json:"hostNames,omitempty" tf:"host_names,omitempty"`

	// Name of the new configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ConfigurationObservation struct {

	// Unique identifier of the new security configuration
	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Unique identifier of the Akamai contract associated with the new configuration
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Unique identifier of the existing configuration being cloned to create the new configuration
	CreateFromConfigID *float64 `json:"createFromConfigId,omitempty" tf:"create_from_config_id,omitempty"`

	// Version number of the existing configuration being cloned to create the new configuration
	CreateFromVersion *float64 `json:"createFromVersion,omitempty" tf:"create_from_version,omitempty"`

	// Brief description of the new configuration
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Unique identifier of the contract group associated with the new configuration
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Hostnames to be protected by the new configuration
	// +listType=set
	HostNames []*string `json:"hostNames,omitempty" tf:"host_names,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the new configuration
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ConfigurationParameters struct {

	// Unique identifier of the Akamai contract associated with the new configuration
	// +kubebuilder:validation:Optional
	ContractID *string `json:"contractId,omitempty" tf:"contract_id,omitempty"`

	// Unique identifier of the existing configuration being cloned to create the new configuration
	// +kubebuilder:validation:Optional
	CreateFromConfigID *float64 `json:"createFromConfigId,omitempty" tf:"create_from_config_id,omitempty"`

	// Version number of the existing configuration being cloned to create the new configuration
	// +kubebuilder:validation:Optional
	CreateFromVersion *float64 `json:"createFromVersion,omitempty" tf:"create_from_version,omitempty"`

	// Brief description of the new configuration
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Unique identifier of the contract group associated with the new configuration
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Hostnames to be protected by the new configuration
	// +kubebuilder:validation:Optional
	// +listType=set
	HostNames []*string `json:"hostNames,omitempty" tf:"host_names,omitempty"`

	// Name of the new configuration
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// ConfigurationSpec defines the desired state of Configuration
type ConfigurationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigurationInitParameters `json:"initProvider,omitempty"`
}

// ConfigurationStatus defines the observed state of Configuration.
type ConfigurationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Configuration is the Schema for the Configurations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type Configuration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contractId) || (has(self.initProvider) && has(self.initProvider.contractId))",message="spec.forProvider.contractId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostNames) || (has(self.initProvider) && has(self.initProvider.hostNames))",message="spec.forProvider.hostNames is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   ConfigurationSpec   `json:"spec"`
	Status ConfigurationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationList contains a list of Configurations
type ConfigurationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Configuration `json:"items"`
}

// Repository type metadata.
var (
	Configuration_Kind             = "Configuration"
	Configuration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Configuration_Kind}.String()
	Configuration_KindAPIVersion   = Configuration_Kind + "." + CRDGroupVersion.String()
	Configuration_GroupVersionKind = CRDGroupVersion.WithKind(Configuration_Kind)
)

func init() {
	SchemeBuilder.Register(&Configuration{}, &ConfigurationList{})
}
