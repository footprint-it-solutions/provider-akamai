// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExceptionsInitParameters struct {

	// +listType=set
	APIRequestConstraints []*string `json:"apiRequestConstraints,omitempty" tf:"api_request_constraints"`

	// +listType=set
	AprProtection []*string `json:"aprProtection,omitempty" tf:"apr_protection"`

	// +listType=set
	BotManagement []*string `json:"botManagement,omitempty" tf:"bot_management"`

	// +listType=set
	ClientRep []*string `json:"clientRep,omitempty" tf:"client_rep"`

	// +listType=set
	CustomRules []*string `json:"customRules,omitempty" tf:"custom_rules"`

	// +listType=set
	IPGeo []*string `json:"ipGeo,omitempty" tf:"ip_geo"`

	// +listType=set
	MalwareProtection []*string `json:"malwareProtection,omitempty" tf:"malware_protection"`

	// +listType=set
	Rate []*string `json:"rate,omitempty" tf:"rate"`

	// +listType=set
	SlowPost []*string `json:"slowPost,omitempty" tf:"slow_post"`

	// +listType=set
	URLProtection []*string `json:"urlProtection,omitempty" tf:"url_protection"`

	// +listType=set
	Waf []*string `json:"waf,omitempty" tf:"waf"`
}

type ExceptionsObservation struct {

	// +listType=set
	APIRequestConstraints []*string `json:"apiRequestConstraints,omitempty" tf:"api_request_constraints,omitempty"`

	// +listType=set
	AprProtection []*string `json:"aprProtection,omitempty" tf:"apr_protection,omitempty"`

	// +listType=set
	BotManagement []*string `json:"botManagement,omitempty" tf:"bot_management,omitempty"`

	// +listType=set
	ClientRep []*string `json:"clientRep,omitempty" tf:"client_rep,omitempty"`

	// +listType=set
	CustomRules []*string `json:"customRules,omitempty" tf:"custom_rules,omitempty"`

	// +listType=set
	IPGeo []*string `json:"ipGeo,omitempty" tf:"ip_geo,omitempty"`

	// +listType=set
	MalwareProtection []*string `json:"malwareProtection,omitempty" tf:"malware_protection,omitempty"`

	// +listType=set
	Rate []*string `json:"rate,omitempty" tf:"rate,omitempty"`

	// +listType=set
	SlowPost []*string `json:"slowPost,omitempty" tf:"slow_post,omitempty"`

	// +listType=set
	URLProtection []*string `json:"urlProtection,omitempty" tf:"url_protection,omitempty"`

	// +listType=set
	Waf []*string `json:"waf,omitempty" tf:"waf,omitempty"`
}

type ExceptionsParameters struct {

	// +kubebuilder:validation:Optional
	// +listType=set
	APIRequestConstraints []*string `json:"apiRequestConstraints,omitempty" tf:"api_request_constraints"`

	// +kubebuilder:validation:Optional
	// +listType=set
	AprProtection []*string `json:"aprProtection,omitempty" tf:"apr_protection"`

	// +kubebuilder:validation:Optional
	// +listType=set
	BotManagement []*string `json:"botManagement,omitempty" tf:"bot_management"`

	// +kubebuilder:validation:Optional
	// +listType=set
	ClientRep []*string `json:"clientRep,omitempty" tf:"client_rep"`

	// +kubebuilder:validation:Optional
	// +listType=set
	CustomRules []*string `json:"customRules,omitempty" tf:"custom_rules"`

	// +kubebuilder:validation:Optional
	// +listType=set
	IPGeo []*string `json:"ipGeo,omitempty" tf:"ip_geo"`

	// +kubebuilder:validation:Optional
	// +listType=set
	MalwareProtection []*string `json:"malwareProtection,omitempty" tf:"malware_protection"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Rate []*string `json:"rate,omitempty" tf:"rate"`

	// +kubebuilder:validation:Optional
	// +listType=set
	SlowPost []*string `json:"slowPost,omitempty" tf:"slow_post"`

	// +kubebuilder:validation:Optional
	// +listType=set
	URLProtection []*string `json:"urlProtection,omitempty" tf:"url_protection"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Waf []*string `json:"waf,omitempty" tf:"waf"`
}

type SiemSettingsInitParameters struct {

	// Unique identifier of the security configuration
	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Whether Bot Manager events should be included in SIEM events
	EnableBotmanSiem *bool `json:"enableBotmanSiem,omitempty" tf:"enable_botman_siem,omitempty"`

	// Whether to enable SIEM on all security policies in the security configuration
	EnableForAllPolicies *bool `json:"enableForAllPolicies,omitempty" tf:"enable_for_all_policies,omitempty"`

	// Whether to enable SIEM
	EnableSiem *bool `json:"enableSiem,omitempty" tf:"enable_siem,omitempty"`

	// Describes all the protections and actions to be excluded from SIEM events
	Exceptions []ExceptionsInitParameters `json:"exceptions,omitempty" tf:"exceptions,omitempty"`

	// List of IDs of security policy for which SIEM integration is to be enabled
	// +listType=set
	SecurityPolicyIds []*string `json:"securityPolicyIds,omitempty" tf:"security_policy_ids,omitempty"`

	// Unique identifier of the SIEM settings being modified
	SiemID *float64 `json:"siemId,omitempty" tf:"siem_id,omitempty"`
}

type SiemSettingsObservation struct {

	// Unique identifier of the security configuration
	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Whether Bot Manager events should be included in SIEM events
	EnableBotmanSiem *bool `json:"enableBotmanSiem,omitempty" tf:"enable_botman_siem,omitempty"`

	// Whether to enable SIEM on all security policies in the security configuration
	EnableForAllPolicies *bool `json:"enableForAllPolicies,omitempty" tf:"enable_for_all_policies,omitempty"`

	// Whether to enable SIEM
	EnableSiem *bool `json:"enableSiem,omitempty" tf:"enable_siem,omitempty"`

	// Describes all the protections and actions to be excluded from SIEM events
	Exceptions []ExceptionsObservation `json:"exceptions,omitempty" tf:"exceptions,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of IDs of security policy for which SIEM integration is to be enabled
	// +listType=set
	SecurityPolicyIds []*string `json:"securityPolicyIds,omitempty" tf:"security_policy_ids,omitempty"`

	// Unique identifier of the SIEM settings being modified
	SiemID *float64 `json:"siemId,omitempty" tf:"siem_id,omitempty"`
}

type SiemSettingsParameters struct {

	// Unique identifier of the security configuration
	// +kubebuilder:validation:Optional
	ConfigID *float64 `json:"configId,omitempty" tf:"config_id,omitempty"`

	// Whether Bot Manager events should be included in SIEM events
	// +kubebuilder:validation:Optional
	EnableBotmanSiem *bool `json:"enableBotmanSiem,omitempty" tf:"enable_botman_siem,omitempty"`

	// Whether to enable SIEM on all security policies in the security configuration
	// +kubebuilder:validation:Optional
	EnableForAllPolicies *bool `json:"enableForAllPolicies,omitempty" tf:"enable_for_all_policies,omitempty"`

	// Whether to enable SIEM
	// +kubebuilder:validation:Optional
	EnableSiem *bool `json:"enableSiem,omitempty" tf:"enable_siem,omitempty"`

	// Describes all the protections and actions to be excluded from SIEM events
	// +kubebuilder:validation:Optional
	Exceptions []ExceptionsParameters `json:"exceptions,omitempty" tf:"exceptions,omitempty"`

	// List of IDs of security policy for which SIEM integration is to be enabled
	// +kubebuilder:validation:Optional
	// +listType=set
	SecurityPolicyIds []*string `json:"securityPolicyIds,omitempty" tf:"security_policy_ids,omitempty"`

	// Unique identifier of the SIEM settings being modified
	// +kubebuilder:validation:Optional
	SiemID *float64 `json:"siemId,omitempty" tf:"siem_id,omitempty"`
}

// SiemSettingsSpec defines the desired state of SiemSettings
type SiemSettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SiemSettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SiemSettingsInitParameters `json:"initProvider,omitempty"`
}

// SiemSettingsStatus defines the observed state of SiemSettings.
type SiemSettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SiemSettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SiemSettings is the Schema for the SiemSettingss API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type SiemSettings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.configId) || (has(self.initProvider) && has(self.initProvider.configId))",message="spec.forProvider.configId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enableForAllPolicies) || (has(self.initProvider) && has(self.initProvider.enableForAllPolicies))",message="spec.forProvider.enableForAllPolicies is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enableSiem) || (has(self.initProvider) && has(self.initProvider.enableSiem))",message="spec.forProvider.enableSiem is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.siemId) || (has(self.initProvider) && has(self.initProvider.siemId))",message="spec.forProvider.siemId is a required parameter"
	Spec   SiemSettingsSpec   `json:"spec"`
	Status SiemSettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SiemSettingsList contains a list of SiemSettingss
type SiemSettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SiemSettings `json:"items"`
}

// Repository type metadata.
var (
	SiemSettings_Kind             = "SiemSettings"
	SiemSettings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SiemSettings_Kind}.String()
	SiemSettings_KindAPIVersion   = SiemSettings_Kind + "." + CRDGroupVersion.String()
	SiemSettings_GroupVersionKind = CRDGroupVersion.WithKind(SiemSettings_Kind)
)

func init() {
	SchemeBuilder.Register(&SiemSettings{}, &SiemSettingsList{})
}
