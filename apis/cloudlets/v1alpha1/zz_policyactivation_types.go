// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyActivationInitParameters struct {

	// Set of property IDs to link to this Cloudlets policy. It is required for non-shared policies
	// +listType=set
	AssociatedProperties []*string `json:"associatedProperties,omitempty" tf:"associated_properties,omitempty"`

	// The network you want to activate the policy version on (options are Staging and Production)
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// ID of the Cloudlets policy you want to activate
	PolicyID *float64 `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Cloudlets policy version you want to activate
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type PolicyActivationObservation struct {

	// Set of property IDs to link to this Cloudlets policy. It is required for non-shared policies
	// +listType=set
	AssociatedProperties []*string `json:"associatedProperties,omitempty" tf:"associated_properties,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates if policy that is being activated is a shared policy
	IsShared *bool `json:"isShared,omitempty" tf:"is_shared,omitempty"`

	// The network you want to activate the policy version on (options are Staging and Production)
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// ID of the Cloudlets policy you want to activate
	PolicyID *float64 `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Activation status for this Cloudlets policy
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Cloudlets policy version you want to activate
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

type PolicyActivationParameters struct {

	// Set of property IDs to link to this Cloudlets policy. It is required for non-shared policies
	// +kubebuilder:validation:Optional
	// +listType=set
	AssociatedProperties []*string `json:"associatedProperties,omitempty" tf:"associated_properties,omitempty"`

	// The network you want to activate the policy version on (options are Staging and Production)
	// +kubebuilder:validation:Optional
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// ID of the Cloudlets policy you want to activate
	// +kubebuilder:validation:Optional
	PolicyID *float64 `json:"policyId,omitempty" tf:"policy_id,omitempty"`

	// Cloudlets policy version you want to activate
	// +kubebuilder:validation:Optional
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`
}

// PolicyActivationSpec defines the desired state of PolicyActivation
type PolicyActivationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyActivationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyActivationInitParameters `json:"initProvider,omitempty"`
}

// PolicyActivationStatus defines the observed state of PolicyActivation.
type PolicyActivationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyActivationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PolicyActivation is the Schema for the PolicyActivations API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type PolicyActivation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.network) || (has(self.initProvider) && has(self.initProvider.network))",message="spec.forProvider.network is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.policyId) || (has(self.initProvider) && has(self.initProvider.policyId))",message="spec.forProvider.policyId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   PolicyActivationSpec   `json:"spec"`
	Status PolicyActivationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyActivationList contains a list of PolicyActivations
type PolicyActivationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyActivation `json:"items"`
}

// Repository type metadata.
var (
	PolicyActivation_Kind             = "PolicyActivation"
	PolicyActivation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyActivation_Kind}.String()
	PolicyActivation_KindAPIVersion   = PolicyActivation_Kind + "." + CRDGroupVersion.String()
	PolicyActivation_GroupVersionKind = CRDGroupVersion.WithKind(PolicyActivation_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyActivation{}, &PolicyActivationList{})
}
