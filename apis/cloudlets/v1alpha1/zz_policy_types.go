// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyInitParameters struct {

	// Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP).
	CloudletCode *string `json:"cloudletCode,omitempty" tf:"cloudlet_code,omitempty"`

	// The description of this specific policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defines the group association for the policy. You must have edit privileges for the group.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The type of policy that you want to create.
	IsShared *bool `json:"isShared,omitempty" tf:"is_shared,omitempty"`

	// The version of the Cloudlet specific matchRules.
	MatchRuleFormat *string `json:"matchRuleFormat,omitempty" tf:"match_rule_format,omitempty"`

	// A JSON structure that defines the rules for this policy.
	MatchRules *string `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// The name of the policy. The name must be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PolicyObservation struct {

	// Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP).
	CloudletCode *string `json:"cloudletCode,omitempty" tf:"cloudlet_code,omitempty"`

	// An integer that corresponds to a non-shared Cloudlets policy type (0 to 9). Not used for shared policies.
	CloudletID *float64 `json:"cloudletId,omitempty" tf:"cloudlet_id,omitempty"`

	// The description of this specific policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defines the group association for the policy. You must have edit privileges for the group.
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The type of policy that you want to create.
	IsShared *bool `json:"isShared,omitempty" tf:"is_shared,omitempty"`

	// The version of the Cloudlet specific matchRules.
	MatchRuleFormat *string `json:"matchRuleFormat,omitempty" tf:"match_rule_format,omitempty"`

	// A JSON structure that defines the rules for this policy.
	MatchRules *string `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// The name of the policy. The name must be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The version number of the policy.
	Version *float64 `json:"version,omitempty" tf:"version,omitempty"`

	// A JSON encoded list of warnings.
	Warnings *string `json:"warnings,omitempty" tf:"warnings,omitempty"`
}

type PolicyParameters struct {

	// Code for the type of Cloudlet (ALB, AP, AS, CD, ER, FR, IG, or VP).
	// +kubebuilder:validation:Optional
	CloudletCode *string `json:"cloudletCode,omitempty" tf:"cloudlet_code,omitempty"`

	// The description of this specific policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Defines the group association for the policy. You must have edit privileges for the group.
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// The type of policy that you want to create.
	// +kubebuilder:validation:Optional
	IsShared *bool `json:"isShared,omitempty" tf:"is_shared,omitempty"`

	// The version of the Cloudlet specific matchRules.
	// +kubebuilder:validation:Optional
	MatchRuleFormat *string `json:"matchRuleFormat,omitempty" tf:"match_rule_format,omitempty"`

	// A JSON structure that defines the rules for this policy.
	// +kubebuilder:validation:Optional
	MatchRules *string `json:"matchRules,omitempty" tf:"match_rules,omitempty"`

	// The name of the policy. The name must be unique.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// PolicySpec defines the desired state of Policy
type PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PolicyInitParameters `json:"initProvider,omitempty"`
}

// PolicyStatus defines the observed state of Policy.
type PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Policy is the Schema for the Policys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,akamai}
type Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cloudletCode) || (has(self.initProvider) && has(self.initProvider.cloudletCode))",message="spec.forProvider.cloudletCode is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupId) || (has(self.initProvider) && has(self.initProvider.groupId))",message="spec.forProvider.groupId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   PolicySpec   `json:"spec"`
	Status PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyList contains a list of Policys
type PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Policy `json:"items"`
}

// Repository type metadata.
var (
	Policy_Kind             = "Policy"
	Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Policy_Kind}.String()
	Policy_KindAPIVersion   = Policy_Kind + "." + CRDGroupVersion.String()
	Policy_GroupVersionKind = CRDGroupVersion.WithKind(Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&Policy{}, &PolicyList{})
}
